/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/basesites': {
    /** Retrieves the base sites and the details of the corresponding base stores. */
    get: operations['getBaseSites'];
  };
  '/{baseSiteId}/basestores/{baseStoreUid}': {
    /** Retrieves the details of the base store. */
    get: operations['getBaseStore'];
  };
  '/{baseSiteId}/cardtypes': {
    /** Retrieves the payment card types defined for the base store. */
    get: operations['getCardTypes'];
  };
  '/{baseSiteId}/catalogs': {
    get: operations['getCatalogs'];
  };
  '/{baseSiteId}/catalogs/{catalogId}': {
    /** Retrieves information about the catalog using catalog identifier. */
    get: operations['getCatalog'];
  };
  '/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}': {
    /** Retrieves information about the catalog version using catalog identifier and catalog version identifier. */
    get: operations['getCatalogVersion'];
  };
  '/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}': {
    /** Retrieves information about the category that exists in a catalog version available. */
    get: operations['getCategories'];
  };
  '/{baseSiteId}/cms/components': {
    /**
     * Retrieves the CMS components using the specified identifiers. If you don't provide any component identifiers, all of the components will be retrieved.
     * The components list is filtered by the specified catalog, product, or category restrictions. The result is sorted according to the sort parameter.
     */
    get: operations['getComponentsByIds'];
    post: operations['searchComponentsByIds'];
  };
  '/{baseSiteId}/cms/components/{componentId}': {
    /** Retrieves the CMS component data. */
    get: operations['getComponentById'];
  };
  '/{baseSiteId}/cms/pages': {
    /**
     * Retrieves the page data and CMS content slots using the pageLabel/pageId or the code parameter. If you don't provide a value for one of these parameters, the homepage CMS content slots are retrieved.
     * Content pages can be filtered using pageLabel/pageId while the other page types can be filtered using the specified code.
     */
    get: operations['getPage'];
  };
  '/{baseSiteId}/cms/pages/{pageId}': {
    /** Retrieves the page data and CMS content slots, each of which contains a list of CMS component data. The page identifier is required. */
    get: operations['getPageById'];
  };
  '/{baseSiteId}/cms/sitepages': {
    get: operations['getAllPages'];
  };
  '/{baseSiteId}/countries': {
    /** Retrieves a list of shipping or billing countries. Set the type parameter to SHIPPING to retrieve the shipping countries. Set the type parameter to BILLING to retrieve the billing countries. Leave the type parameter blank to retrieve all of the countries. The list is sorted alphabetically. */
    get: operations['getCountries'];
  };
  '/{baseSiteId}/countries/{countyIsoCode}/regions': {
    /** Retrieves the list of regions in a country. */
    get: operations['getCountryRegions'];
  };
  '/{baseSiteId}/currencies': {
    /** Retrieves a list of available currencies for the current base store. If the currency list is empty, all of the currencies available in the system are returned. */
    get: operations['getCurrencies'];
  };
  '/{baseSiteId}/customergroups': {
    /** Retrieves the subgroup information of a customer group. To perform this call, you must be an authorized member of the customermanagergroup. */
    get: operations['getCustomerGroups'];
    /**
     * Creates a new customer group that is a direct subgroup of a customergroup.
     *
     * To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
     */
    post: operations['createCustomerGroup'];
  };
  '/{baseSiteId}/customergroups/{groupId}': {
    /** Retrieves a customer group. To try out the methods of the customer groups controller, authorize a customer who belongs to the customermanagergroup. */
    get: operations['getCustomerGroup'];
  };
  '/{baseSiteId}/customergroups/{groupId}/members': {
    /**
     * Sets members for a user group. The list of existing members is overwritten with a new one.
     *
     * To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
     */
    put: operations['replaceUsersForCustomerGroup'];
    /** Assigns members to a customer group. To perform this call, you must be an authorized member of the customermanagergroup. */
    patch: operations['updateCustomerGroupWithUsers'];
  };
  '/{baseSiteId}/customergroups/{groupId}/members/{userId}': {
    /** Deletes the customer from a customer group. To try out the methods in the customer groups controller, authorize a customer who belongs to the customermanagergroup. */
    delete: operations['removeUsersFromCustomerGroup'];
  };
  '/{baseSiteId}/deliverycountries': {
    /** Retrieves a list of the supported delivery countries for the current store. The list is sorted alphabetically. */
    get: operations['getDeliveryCountries'];
  };
  '/{baseSiteId}/export/products': {
    /** Retrieves all of the products or only the products that were modified after the time in the timestamp parameter. */
    get: operations['getExportedProducts'];
  };
  '/{baseSiteId}/feeds/orders/statusfeed': {
    /** Retrieves the orders that have changed status. Only the properties from the current baseSite that have been updated after the specified timestamp are returned. */
    get: operations['getOrderStatusFeed'];
  };
  '/{baseSiteId}/forgottenpasswordtokens': {
    /** Creates a token so that customers can restore their forgotten passwords. */
    post: operations['doRestorePassword'];
  };
  '/{baseSiteId}/integration/merchant_callback': {
    /**
     * Validates the decision of the merchant.
     *
     * Note: The execution of the “Try it out” button always returns an error because the merchant callback controller handles parameters differently depending on which payment provider is used.
     */
    post: operations['doHandleMerchantCallback'];
  };
  '/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response': {
    /**
     * Handles and validates the decision of the merchant for a cart.The PaymentSubscriptionResult is stored for the cart.
     *
     * Note: The execution of the “Try it out” button always returns an error because the merchant callback controller handles parameters differently, depending on which payment provider is used.
     */
    post: operations['doHandleCartMerchantCallback'];
  };
  '/{baseSiteId}/languages': {
    /** Retrieves a list of the available languages of the base store. If the language list is empty, all of the languages available in the system are returned. */
    get: operations['getLanguages'];
  };
  '/{baseSiteId}/merchantKey': {
    get: operations['getMerchantKey'];
  };
  '/{baseSiteId}/merchantKey/isABC': {
    get: operations['isMerchantABC'];
  };
  '/{baseSiteId}/orders/{code}': {
    /** Retrieves the details of the order using the Globally Unique Identifier (GUID) or the order code. To get entryGroup information, set fields value as follows: fields=entryGroups(BASIC), fields=entryGroups(DEFAULT), or fields=entryGroups(FULL). */
    get: operations['getOrder'];
  };
  '/{baseSiteId}/passwordRestoreToken': {
    /** Creates and sends a token that is used to restore a forgotten password in a following asynchronous customer communication. */
    post: operations['sendPasswordRestoreToken'];
  };
  '/{baseSiteId}/paymentmodes': {
    /** Retrieves the payment modes defined for the base store. */
    get: operations['getPaymentModes'];
  };
  '/{baseSiteId}/products/expressupdate': {
    /** Retrieves products that were added to the express update feed. Only the properties that were updated after the specified timestamp are returned. The queue is cleared using a defined cronjob. */
    get: operations['getExpressUpdateProducts'];
  };
  '/{baseSiteId}/products/search': {
    /** Retrieves a list of products and related product search data, such as available facets, available sorting, and spelling suggestions. To enable spelling suggestions, you need to have indexed properties configured to be used for spell checking. */
    get: operations['getProducts'];
    /** In the response header, the "x-total-count" property indicates the total number of products for the query. */
    head: operations['countProducts'];
  };
  '/{baseSiteId}/products/suggestions': {
    /** Retrieves the suggestions related to a specified term and limits the results according to the value of the max parameter. */
    get: operations['getSuggestions'];
  };
  '/{baseSiteId}/products/{productCode}': {
    /** Retrieves the details of a single product using the product identifier. */
    get: operations['getProduct'];
  };
  '/{baseSiteId}/products/{productCode}/references': {
    /** Retrieves the references using the product code and reference type. */
    get: operations['getProductReferences'];
  };
  '/{baseSiteId}/products/{productCode}/reviews': {
    /** Retrieves all the reviews for a product. To limit the number of reviews returned, use the maxCount parameter. */
    get: operations['getProductReviews'];
    /** Creates a customer review for a product as an anonymous user. */
    post: operations['createProductReview'];
  };
  '/{baseSiteId}/products/{productCode}/stock': {
    /** The stock levels are sorted by distance from the specified location, which is defined using the free-text location parameter or the longitude and latitude parameters. Either location parameter or longitude and latitude parameters are required. */
    get: operations['getLocationProductStock'];
    /** In the response header, the "x-total-count" property indicates the total number of stock levels of a product. Either location parameter or longitude and latitude parameters are required. */
    head: operations['countProductStockByLocation'];
  };
  '/{baseSiteId}/products/{productCode}/stock/{storeName}': {
    /** Retrieves the stock level of a product for the store. */
    get: operations['getStoreProductStock'];
  };
  '/{baseSiteId}/promotions': {
    /** Retrieves the promotions defined for a current base site. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine. */
    get: operations['getPromotions'];
  };
  '/{baseSiteId}/promotions/{code}': {
    /** Retrieves the details of a promotion using the specified code. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine. */
    get: operations['getPromotion'];
  };
  '/{baseSiteId}/resetpassword': {
    /** Reset password after customer's clicked forgotten password link. A new password needs to be provided. */
    post: operations['doResetPassword'];
  };
  '/{baseSiteId}/stores': {
    /** Retrieves the store locations that are near the location specified in a query or the latitude and longitude parameters. */
    get: operations['getStoreLocations'];
    /** In the response header, the "x-total-count" indicates the number of all stores that are near the location specified in the query or based on latitude and longitude. */
    head: operations['countStoreLocations'];
  };
  '/{baseSiteId}/stores/country/{countryIso}': {
    /** Retrieves the store locations that are in the specified country. */
    get: operations['getStoresByCountry'];
  };
  '/{baseSiteId}/stores/country/{countryIso}/region/{regionIso}': {
    /** Retrieves the store locations in the specified country and region. */
    get: operations['getStoresByCountryAndRegion'];
  };
  '/{baseSiteId}/stores/storescounts': {
    /** Retrieves store counts per country and region. */
    get: operations['getLocationCounts'];
  };
  '/{baseSiteId}/stores/{storeId}': {
    /** Retrieves a store location using its unique name. */
    get: operations['getStoreLocation'];
  };
  '/{baseSiteId}/titles': {
    get: operations['getTitles'];
  };
  '/{baseSiteId}/users': {
    /** Registers a customer. Requires the following parameters: login, password, firstName, lastName, titleCode. */
    post: operations['createUser'];
  };
  '/{baseSiteId}/users/{userId}': {
    get: operations['getUser'];
    /** Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default). */
    put: operations['replaceUser'];
    delete: operations['removeUser'];
    /** Updates customer profile. Only attributes provided in the request body will be changed. */
    patch: operations['updateUser'];
  };
  '/{baseSiteId}/users/{userId}/addresses': {
    /** Retrieves a list of all the addresses associated with a customer. */
    get: operations['getAddresses'];
    /** Creates a new address with detailed information provided. */
    post: operations['createAddress'];
  };
  '/{baseSiteId}/users/{userId}/addresses/verification': {
    /** Validates the address of a customer. */
    post: operations['validateAddress'];
  };
  '/{baseSiteId}/users/{userId}/addresses/{addressId}': {
    /** Returns detailed information about address with a given id. */
    get: operations['getAddress'];
    /** Updates the address. Attributes not provided in the request will be defined again (set to null or default). */
    put: operations['replaceAddress'];
    /** Deletes the address of a customer, which means the address records are erased. */
    delete: operations['removeAddress'];
    /** Updates the address. Only attributes provided in the request body will be changed. */
    patch: operations['updateAddress'];
  };
  '/{baseSiteId}/users/{userId}/carts': {
    /** Retrieves a list of all the carts associated with a customer. */
    get: operations['getCarts'];
    /** Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request). */
    post: operations['createCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}': {
    /** Retrieves a cart using the cart identifier. To get entryGroup information, set fields value as follows: fields=entryGroups(BASIC), fields=entryGroups(DEFAULT), or fields=entryGroups(FULL). */
    get: operations['getCart'];
    delete: operations['removeCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/ach/item/public_token/exchange': {
    /** Gets the ACH access token */
    post: operations['itemPublicTokenExchange'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/ach/link/token/create': {
    /** Gets the ACH link token */
    post: operations['linkTokenCreate'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/checkoutcomdeliverypayment': {
    /** Sets a delivery and payment address for the cart. */
    put: operations['replaceCartDeliveryAndBillingAddress'];
    /** Creates a delivery and a payment address for the cart. */
    post: operations['createCartDeliveryAndBillingAddress'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery': {
    /** The updated address country must be a valid delivery country for the current base store. */
    put: operations['replaceCartDeliveryAddress'];
    post: operations['createCartDeliveryAddress'];
    /** Deletes the delivery address associated with a cart. */
    delete: operations['removeCartDeliveryAddress'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/apm/available': {
    get: operations['getAvailableApmsForCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/applepay/deliveryAddress': {
    /** Creates a delivery address for the cart. */
    post: operations['setDeliveryAddress'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/applepay/deliveryMethod': {
    /** Sets the deliveryMode for the cart. */
    post: operations['setDeliveryMethodOnCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/applepay/paymentRequest': {
    /** Gets apple pay payment request */
    get: operations['getPaymentRequest'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/applepay/placeOrder': {
    /** Place a order with apple pay. */
    post: operations['placeOrder_2'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/applepay/requestSession': {
    /** Validates the session for apple pay */
    post: operations['requestSession'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/checkoutcomapmpaymentdetails': {
    /** Defines and assigns details of a new APM payment to the cart. */
    post: operations['createCartPaymentDetails_2'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/checkoutcompaymentdetails': {
    /** Defines and assigns details of a new credit card payment to the cart. */
    post: operations['createCartPaymentDetails_1'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/checkoutoccbillingaddress': {
    post: operations['addBillingAddressToCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart': {
    /** Creates a clone of a saved cart. Customers can provide a name and a description for the cloned cart even though they aren't mandatory parameters. */
    post: operations['doCartClone'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate': {
    /**
     * Retrieves a list of stores that have all the cart entries in stock and ready for pickup.
     *
     * Note: The response returns an empty list if no store has all the products in stock or if the products are all associated with the same pickup location.
     */
    get: operations['getConsolidatedPickupLocations'];
    /**
     * Creates the store location where the customer will pick up all the products.
     *
     * Note: If any product is out of stock at the specified location, this product is removed from the cart.
     */
    post: operations['createConsolidatedPickupLocation'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode': {
    /** Retrieves information about the delivery mode selected for the cart, including the delivery mode code, name, cost, and so on. */
    get: operations['getCartDeliveryMode'];
    /** Updates the delivery mode details for the cart based on the specified delivery mode identifier. */
    put: operations['replaceCartDeliveryMode'];
    delete: operations['removeCartDeliveryMode'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes': {
    /** Retrieves the delivery modes defined for the current base store and the cart delivery address. If the cart does not have a delivery address, an empty list will be returned. */
    get: operations['getCartDeliveryModes'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/direct-place-order': {
    /** Place an order for direct APMs. */
    post: operations['placeDirectOrder'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/email': {
    /** Assigns an email to the cart. */
    put: operations['replaceCartGuestUser'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/entries': {
    /** Retrieves a list of cart entries with the product data. */
    get: operations['getCartEntries'];
    /** Adds a product to the specified cart. */
    post: operations['createCartEntry'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}': {
    get: operations['getCartEntry'];
    /** Updates the quantity of a single cart entry and the details of the pickup store. Attributes not provided in the request will be defined again (set to null or default) */
    put: operations['replaceCartEntry'];
    delete: operations['removeCartEntry'];
    /** Updates the quantity of a single cart entry and the details of the pickup store. */
    patch: operations['updateCartEntry'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/entrygroups/{entryGroupNumber}': {
    post: operations['addToCartEntryGroup'];
    /** Deletes an entry group from the associated cart. */
    delete: operations['removeCartEntryGroup'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion': {
    /** Updates the cart without corresponding saved cart attributes by flagging it for deletion. The cart is not deleted from the database, but without the saved cart properties, the cart will be handled by the cart removal job just like any other cart. */
    patch: operations['doUpdateFlagForDeletion'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/google/deliveryInfo': {
    /** Creates a delivery address and delivery method for the cart. */
    post: operations['getGooglePayDeliveryInfo'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/google/merchant-configuration': {
    /** Gets google pay payment request */
    get: operations['getMerchantConfiguration'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/google/placeOrder': {
    /** Place a order with google pay. */
    post: operations['placeOrder_1'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/klarna/clientToken': {
    /** Gets the klarna client token */
    get: operations['getClientToken'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request': {
    /** Retrieves the information required to create a subscription that contacts the payment provider directly. This information contains the URL of the payment provider and a list of required parameters. */
    get: operations['getSopPaymentRequestDetails'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response': {
    /**
     * Retrieves the response from the payment provider after creating the SOP payment subscription. If the payment subscription was created successfully, the payment details are returned. If no response from the payment provider, a "202 Accepted" status is returned. Otherwise, an error response is returned.
     *
     * Note: The execution of the “Try it out” button always returns an error because the extended carts controller handles parameters differently depending on which payment provider is used.
     */
    get: operations['getSopPaymentResponse'];
    /**
     * If the SOP payment subscription was successfully created, the payment details are defined and returned.
     *
     * Note: The execution of the “Try it out” button always returns an error because the extended carts controller handles parameters differently, depending on which payment provider is used.
     */
    post: operations['doHandleSopPaymentResponse'];
    /** Deletes the payment provider response for the SOP payment subscription. */
    delete: operations['removeSopPaymentResponse'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails': {
    /** Sets credit card payment details for the specified cart. */
    put: operations['replaceCartPaymentDetails'];
    /** Creates the details of a new credit card payment and assigns it to the cart. */
    post: operations['createCartPaymentDetails'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/promotions': {
    /** Retrieves information about the promotions applied to the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
    get: operations['getCartPromotions'];
    /** Applies a promotion to the cart using the promotion identifier. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
    post: operations['doApplyCartPromotion'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}': {
    /** Retrieves information about the promotion using the promotion identifier associated with the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
    get: operations['getCartPromotion'];
    /** Deletes the promotion of the order using the promotion identifier defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
    delete: operations['removeCartPromotion'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/redirect-place-order': {
    /** Place an order for redirect APMs. */
    post: operations['placeRedirectOrder'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/requestedretrievaldate': {
    /** Sets the requested retrieval date with a given date for the cart. */
    put: operations['setCartRequestedRetrievalDate'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart': {
    /** Restores the data of a saved cart. */
    patch: operations['doUpdateSavedCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/save': {
    /** Updates a cart to explicitly save it. Adds the name and description of the saved cart if specified. */
    patch: operations['doSaveCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart': {
    /** Retrieves the saved cart for an authenticated customer using the cart identifier.  To get entryGroup information, set fields value as follows: fields=savedCartData(entryGroups(BASIC)), fields=savedCartData(entryGroups(DEFAULT)), or fields=savedCartData(entryGroups(FULL)). */
    get: operations['getSavedCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/validate': {
    /** Validates the cart and returns the cart data during checkout and quotation. */
    post: operations['validateCart'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers': {
    /** Retrieves a list of vouchers associated with the cart. */
    get: operations['getCartVouchers'];
    /** Assigns a voucher to the cart using the voucher identifier. */
    post: operations['doApplyCartVoucher'];
  };
  '/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}': {
    /** Deletes a voucher associated with the current cart. */
    delete: operations['removeCartVoucher'];
  };
  '/{baseSiteId}/users/{userId}/cms/components': {
    /**
     * Retrieves the CMS components using the specified identifiers. If you don't provide any component identifiers, all of the components will be retrieved.
     * The components list is filtered by the specified catalog, product, or category restrictions.The result is sorted according to the sort parameter.
     */
    get: operations['getComponentsByIdsAndUser'];
  };
  '/{baseSiteId}/users/{userId}/cms/components/{componentId}': {
    /** Retrieves the CMS component data. */
    get: operations['getComponentByIdAndUser'];
  };
  '/{baseSiteId}/users/{userId}/cms/pages': {
    /**
     * Retrieves the page data and CMS content slots using the pageLabel/pageId or the code parameter. If you don't provide a value for one of these parameters, the homepage CMS content slots are retrieved.
     * Content pages can be filtered using pageLabel/pageId while the other page types can be filtered using the specified code.
     */
    get: operations['getPageWithUser'];
  };
  '/{baseSiteId}/users/{userId}/cms/pages/{pageId}': {
    /** Retrieves the page data and CMS content slots, each of which contains a list of CMS component data. The page identifier is required. */
    get: operations['getPageByIdAndUser'];
  };
  '/{baseSiteId}/users/{userId}/cms/sitepages': {
    get: operations['getAllPagesWithUser'];
  };
  '/{baseSiteId}/users/{userId}/consents': {
    /** Creates consent to collect or transfer the personal data of a customer. */
    post: operations['doGiveConsent'];
  };
  '/{baseSiteId}/users/{userId}/consents/{consentCode}': {
    /** If the consent was given, then the consent is deleted. If the consent was withdrawn, then it returns a withdrawal error. If the consent doesn't exist, it returns a "not found" error. If the customer is anonymous, then it returns an "access denied" error. */
    delete: operations['removeConsent'];
  };
  '/{baseSiteId}/users/{userId}/consenttemplates': {
    /** If a customer has not given or has withdrawn their consent to the template, a date is not returned. */
    get: operations['getConsentTemplates'];
  };
  '/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}': {
    /** Retrieves the consent using the template identifier. If a customer has not given or has withdrawn their consent to the template, a date is not returned. */
    get: operations['getConsentTemplate'];
  };
  '/{baseSiteId}/users/{userId}/customergroups': {
    get: operations['getUserCustomerGroups'];
  };
  '/{baseSiteId}/users/{userId}/futureStocks': {
    /** Retrieves the products and their future availabilities. */
    get: operations['getFutureStocksList'];
  };
  '/{baseSiteId}/users/{userId}/futureStocks/{productCode}': {
    get: operations['getFutureStocks'];
  };
  '/{baseSiteId}/users/{userId}/login': {
    /** Changes a customer's login name. Requires the customer's current password. */
    put: operations['replaceUserLogin'];
    /** Changes a customer's login id. Requires the customer's current password. */
    post: operations['changeUserLoginId'];
  };
  '/{baseSiteId}/users/{userId}/loginnotification': {
    /** Publish notification event about successful login. */
    post: operations['doPublishSuccessfulLoginEvent'];
  };
  '/{baseSiteId}/users/{userId}/notificationpreferences': {
    /** Returns the notification preferences of the current customer. */
    get: operations['getNotificationPreferences'];
    /** Updates the notification preference of the current customer. */
    patch: operations['updateNotificationPreferences'];
  };
  '/{baseSiteId}/users/{userId}/notifications/sitemessages': {
    /** Returns the site messages of current customer. */
    get: operations['siteMessages'];
  };
  '/{baseSiteId}/users/{userId}/orderReturns': {
    /** Retrieves the order history for all return requests associated with a customer. */
    get: operations['getReturnRequests'];
    /** Creates an order return request. An order can be completely or partially returned. For a complete return, add all order entry numbers and quantities in the request body. For a partial return, only add the order entry numbers and quantities of the selected products. */
    post: operations['createReturnRequest'];
  };
  '/{baseSiteId}/users/{userId}/orderReturns/{returnRequestCode}': {
    /** Retrieves the details of a return request. To get entryGroup information, set fields value as follows: fields=order(entryGroups(BASIC)), fields=order(entryGroups(DEFAULT)), or fields=order(entryGroups(FULL)). */
    get: operations['getReturnRequest'];
    /** Updates the order return request. Only cancellation of the request is supported by setting the attribute status to CANCELLING. Cancellation of the return request cannot be reverted */
    patch: operations['updateReturnRequest'];
  };
  '/{baseSiteId}/users/{userId}/orders': {
    /** Retrieves the order history of a customer. The response may display the results across multiple pages, when applicable. */
    get: operations['getUserOrderHistory'];
    /** Creates an order and returns the order details. The response contains all the order data. */
    post: operations['placeOrder'];
    /** Retrieves the total number of orders for a customer in the response header, under the "x-total-count" attribute. */
    head: operations['countUserOrders'];
  };
  '/{baseSiteId}/users/{userId}/orders/{code}': {
    /** Retrieves the details of the order. To get entryGroup information, set fields value as follows: fields=entryGroups(BASIC), fields=entryGroups(DEFAULT), or fields=entryGroups(FULL). */
    get: operations['getUserOrders'];
  };
  '/{baseSiteId}/users/{userId}/orders/{code}/cancellation': {
    /** Cancels an order, completely or partially. For a complete cancellation, add all the order entry numbers and quantities in the request body. For partial cancellation, only add the order entry numbers and quantities to be cancelled. */
    post: operations['doCancelOrder'];
  };
  '/{baseSiteId}/users/{userId}/orders/{code}/invoices': {
    /** Returns invoices based on a specific order code. The response contains list of invoice information. */
    get: operations['getUserOrderInvoices'];
  };
  '/{baseSiteId}/users/{userId}/orders/{code}/invoices/{invoiceId}/download': {
    /** Get invoice of an order in encoded byte array */
    get: operations['getUserOrderInvoiceBinary'];
  };
  '/{baseSiteId}/users/{userId}/orders/{orderCode}/consignments/{consignmentCode}/tracking': {
    /** Returns details of consignment tracking information based on the order code and the consignment code. */
    get: operations['getConsignmentTrackingData'];
  };
  '/{baseSiteId}/users/{userId}/password': {
    put: operations['replaceUserPassword'];
    post: operations['changeUserPassword'];
  };
  '/{baseSiteId}/users/{userId}/paymentdetails': {
    /** Retrieves all credit card payment details made by the customer. */
    get: operations['getPaymentDetailsList'];
  };
  '/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}': {
    /** Retrieves specific credit card payment details made by the customer using the paymentDetailsId. */
    get: operations['getPaymentDetails'];
    /** Updates existing customer's credit card payment info. */
    put: operations['replacePaymentDetails'];
    /** Deletes customer's credit card payment details. */
    delete: operations['removePaymentDetails'];
    /** Updates existing credit card payment details made by the customer using the paymentDetailsId. Only those attributes provided in the request will be updated. */
    patch: operations['updatePaymentDetails'];
  };
  '/{baseSiteId}/users/{userId}/productinterests': {
    /** Retrieves product interests as CustomerInterestsSearchResult for a specific user. */
    get: operations['getProductInterests'];
    /** Creates a product interest for a customer at a time. */
    post: operations['createProductInterest'];
    /** Deletes the product interests that a customer saved with product code and notification type. */
    delete: operations['removeProductInterest'];
  };
  '/{baseSiteId}/users/{userId}/verificationToken': {
    /** Creates verification token, and sends token code via designated channel e.g. email. */
    post: operations['createVerificationToken'];
  };
  '/{baseSiteId}/vouchers/{code}': {
    /** Retrieves the details of the voucher using the voucher identifier. */
    get: operations['getVoucher'];
  };
}

export interface components {
  schemas: {
    /** @description Address object */
    Address: {
      /** @description Unique id value of the address which is optional while creating new address. While performing other address operations this value is the key */
      id?: string;
      /**
       * @description Title of the address person
       * @example Mr.
       */
      title?: string;
      /**
       * @description Code of the title
       * @example MR
       */
      titleCode: string;
      /**
       * @description First name of the address person
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the address person
       * @example Doe
       */
      lastName: string;
      /**
       * @description Company Name
       * @example Global Corp.
       */
      companyName?: string;
      /**
       * @description First line of the address
       * @example 123 Main Street
       */
      line1: string;
      /**
       * @description Second line of the address
       * @example Garden Level
       */
      line2?: string;
      /**
       * @description Town, field required
       * @example New York City
       */
      town: string;
      region?: components['schemas']['Region'];
      /**
       * @description District name
       * @example 8th
       */
      district?: string;
      /**
       * @description Postal code of the address
       * @example 10001
       */
      postalCode: string;
      /**
       * @description Phone number
       * @example +1 (123) 456-7890
       */
      phone?: string;
      /**
       * @description Cellphone number
       * @example +1 (123) 456-7890
       */
      cellphone?: string;
      /**
       * @description Email address
       * @example johndoe@domain.com
       */
      email?: string;
      country?: components['schemas']['Country'];
      /** @description Boolean flag if address is for shipping */
      shippingAddress?: boolean;
      /** @description Boolean flag if address is default */
      defaultAddress?: boolean;
      /** @description Boolean flag if address is visible in the Address Book */
      visibleInAddressBook?: boolean;
      /** @description Boolean flag if address is formatted */
      formattedAddress?: string;
    };
    /** @description Representation of an Address list */
    AddressList: {
      /** @description List of addresses */
      addresses?: components['schemas']['Address'][];
    };
    /** @description Representation of an Address Validation */
    AddressValidation: {
      errors?: components['schemas']['errorList'];
      /** @description Decision */
      decision?: string;
      /** @description List of suggested addresses */
      suggestedAddresses?: components['schemas']['Address'][];
    };
    ApplePayAdditionalAuthInfo: {
      /** @enum {string} */
      walletType?: 'APPLEPAY' | 'GOOGLEPAY';
      installationId?: string;
      statementNarrative?: string;
      orderContent?: string;
      usingShippingAsBilling?: boolean;
      saveCard?: boolean;
      paymentMethod?: string;
      paResponse?: string;
      header?: components['schemas']['ApplePayHeader'];
      signature?: string;
      version?: string;
      data?: string;
    };
    ApplePayAuthorisationRequest: {
      token?: components['schemas']['ApplePayPaymentToken'];
      billingContact?: components['schemas']['ApplePayPaymentContact'];
      shippingContact?: components['schemas']['ApplePayPaymentContact'];
    };
    ApplePayHeader: {
      ephemeralPublicKey?: string;
      publicKeyHash?: string;
      transactionId?: string;
    };
    ApplePayLineItem: {
      label?: string;
      type?: string;
      amount?: string;
    };
    ApplePayPaymentContact: {
      administrativeArea?: string;
      countryCode?: string;
      locality?: string;
      postalCode?: string;
      phoneNumber?: string;
      emailAddress?: string;
      givenName?: string;
      familyName?: string;
      phoneticGivenName?: string;
      phoneticFamilyName?: string;
      addressLines?: string[];
      subLocality?: string;
      subAdministrativeArea?: string;
      country?: string;
    };
    ApplePayPaymentRequest: {
      supportedNetworks?: string[];
      merchantCapabilities?: string[];
      countryCode?: string;
      currencyCode?: string;
      total?: components['schemas']['ApplePayTotal'];
      requiredBillingContactFields?: string[];
    };
    ApplePayPaymentToken: {
      paymentData?: components['schemas']['ApplePayAdditionalAuthInfo'];
    };
    ApplePayShippingContactUpdate: {
      newTotal?: components['schemas']['ApplePayLineItem'];
      newShippingMethods?: components['schemas']['ApplePayShippingMethod'][];
    };
    ApplePayShippingMethod: {
      label?: string;
      detail?: string;
      amount?: string;
      identifier?: string;
    };
    ApplePayShippingMethodUpdate: {
      newTotal?: components['schemas']['ApplePayLineItem'];
    };
    ApplePayTotal: {
      label?: string;
      amount?: string;
      type?: string;
    };
    ApplePayValidateMerchantRequest: {
      validationURL?: string;
    };
    BaseCardPaymentMethodParameters: {
      allowedAuthMethods?: string[];
      allowedCardNetworks?: string[];
      billingAddressRequired?: boolean;
      billingAddressParameters?: components['schemas']['GooglePayBillingAddressParametersFormat'];
    };
    BaseCardPaymentMethod: {
      type?: string;
      parameters?: components['schemas']['BaseCardPaymentMethodParameters'];
    };
    /** @description Representation of a Base Option */
    BaseOption: {
      /** @description Variant type of base option */
      variantType?: string;
      /** @description List of all variant options */
      options?: components['schemas']['VariantOption'][];
      selected?: components['schemas']['VariantOption'];
    };
    /** @description Representation of a Base Site */
    BaseSite: {
      /** @description Unique identifier of Basesite */
      uid?: string;
      /** @description Name of Basesite */
      name?: string;
      /** @description List of Basestores */
      stores?: components['schemas']['BaseStore'][];
      /** @description Theme of Basesite */
      theme?: string;
      defaultLanguage?: components['schemas']['Language'];
      /** @description Locale data for Basesite */
      locale?: string;
      /** @description Channel */
      channel?: string;
      /** @description List of url encoding attributes */
      urlEncodingAttributes?: string[];
      /** @description List of url patterns */
      urlPatterns?: string[];
      /** @description Default preview catalog id */
      defaultPreviewCatalogId?: string;
      /** @description Default preview category code */
      defaultPreviewCategoryCode?: string;
      /** @description Default preview product code */
      defaultPreviewProductCode?: string;
      /** @description Indicates whether customer data isolation is enabled for this site. If true, customer can get site information after registration, For example registerd username is name@sap.com, returned uid will be name@sap.com|baseSiteUid */
      isolated?: boolean;
      captchaConfig?: components['schemas']['CaptchaConfig'];
    };
    /** @description Representation of a Base Site List */
    BaseSiteList: {
      /** @description List of basesites */
      baseSites?: components['schemas']['BaseSite'][];
    };
    /** @description Representation of a Base Store */
    BaseStore: {
      /** @description Base store name */
      name?: string;
      /** @description Flag defining is external tax is enabled */
      externalTaxEnabled?: boolean;
      /** @description Payment provider */
      paymentProvider?: string;
      /** @description Create return process code */
      createReturnProcessCode?: string;
      /**
       * Format: double
       * @description Maximum radius for searching point of service
       */
      maxRadiusForPosSearch?: number;
      /** @description Submit order process code */
      submitOrderProcessCode?: string;
      /** @description List of currencies */
      currencies?: components['schemas']['Currency'][];
      defaultCurrency?: components['schemas']['Currency'];
      defaultDeliveryOrigin?: components['schemas']['PointOfService'];
      defaultLanguage?: components['schemas']['Language'];
      /** @description List of delivery countries */
      deliveryCountries?: components['schemas']['Country'][];
      deliveryModes?: components['schemas']['DeliveryModeList'];
      /** @description List of languages */
      languages?: components['schemas']['Language'][];
      /** @description List of points of service */
      pointsOfService?: components['schemas']['PointOfService'][];
      /** @description Flag specifying whether the express checkout option is enabled */
      expressCheckoutEnabled?: boolean;
    };
    /** @description Basic notification preference */
    BasicnotificationPreference: {
      /**
       * @description preference channel
       * @example email, sms, site_message
       */
      channel?: string;
      /** @description if true, the channel is on; if false, the channel is off */
      enabled?: boolean;
    };
    /** @description Notification preference list */
    BasicnotificationPreferenceList: {
      /** @description Basic notification preferences */
      preferences?: components['schemas']['BasicnotificationPreference'][];
    };
    /** @description Representation of a Breadcrumb */
    Breadcrumb: {
      /** @description Code of the facet */
      facetCode?: string;
      /** @description Name of the facet */
      facetName?: string;
      /** @description Value code of the facet */
      facetValueCode?: string;
      /** @description Value name of the facet */
      facetValueName?: string;
      removeQuery?: components['schemas']['SearchState'];
      truncateQuery?: components['schemas']['SearchState'];
    };
    CMSPageList: {
      page?: components['schemas']['CMSPage'][];
    };
    CMSPage: {
      uid?: string;
      uuid?: string;
      title?: string;
      template?: string;
      typeCode?: string;
      name?: string;
      description?: string;
      robotTag?: string;
      defaultPage?: boolean;
      contentSlots?: components['schemas']['ContentSlotList'];
      catalogVersionUuid?: string;
      otherProperties?: { [key: string]: { [key: string]: unknown } };
    };
    /** @description Representation of a cancellation request entry input for an order */
    CancellationRequestEntryInput: {
      /**
       * Format: int32
       * @description Order entry number of the cancelled product
       * @example 1
       */
      orderEntryNumber: number;
      /**
       * Format: int64
       * @description Quantity of the product which belongs to the order entry and is requested to be cancelled
       * @example 5
       */
      quantity: number;
    };
    /** @description Cancellation request input list for the current order. */
    CancellationRequestEntryInputList: {
      /** @description Cancellation request entry inputs which contain information about the order entries which are requested to be cancelled */
      cancellationRequestEntryInputs: components['schemas']['CancellationRequestEntryInput'][];
    };
    /** @description Configuration information of captcha */
    CaptchaConfig: {
      /**
       * @description Indicates if the captcha is enabled or not
       * @example true
       */
      enabled?: boolean;
      /**
       * @description The public key used in captcha validation
       * @example 6LdeF6tgAAAAAE_T55TB0nmg--qmbnkwqC4LPQbg
       */
      publicKey?: string;
    };
    /** @description Representation of a Card Type */
    CardType: {
      /** @description Card type code */
      code?: string;
      /** @description Card type name */
      name?: string;
    };
    /** @description Representation of a Card Type List */
    CardTypeList: {
      /** @description List of card types */
      cardTypes?: components['schemas']['CardType'][];
    };
    /** @description Representation of a Cart */
    Cart: {
      /** @description Code number of order */
      code?: string;
      /** @description Flag stating iv value is net-value */
      net?: boolean;
      totalPriceWithTax?: components['schemas']['Price'];
      totalPrice?: components['schemas']['Price'];
      totalTax?: components['schemas']['Price'];
      subTotal?: components['schemas']['Price'];
      deliveryCost?: components['schemas']['Price'];
      /** @description List of order entries */
      entries?: components['schemas']['OrderEntry'][];
      /** @description List of entry groups */
      entryGroups?: components['schemas']['EntryGroup'][];
      /** Format: int32 */
      totalItems?: number;
      deliveryMode?: components['schemas']['DeliveryMode'];
      deliveryAddress?: components['schemas']['Address'];
      paymentInfo?: components['schemas']['PaymentDetails'];
      /** @description List of applied order promotions */
      appliedOrderPromotions?: components['schemas']['PromotionResult'][];
      /** @description List of applied product promotions */
      appliedProductPromotions?: components['schemas']['PromotionResult'][];
      productDiscounts?: components['schemas']['Price'];
      orderDiscounts?: components['schemas']['Price'];
      totalDiscounts?: components['schemas']['Price'];
      /** @description Site */
      site?: string;
      /** @description Store */
      store?: string;
      /** @description Guest user id identifier */
      guid?: string;
      /** @description Flag showing if order is calculated */
      calculated?: boolean;
      /** @description List of applied vouchers */
      appliedVouchers?: components['schemas']['Voucher'][];
      user?: components['schemas']['Principal'];
      /** @description List of pickup order entry group */
      pickupOrderGroups?: components['schemas']['PickupOrderEntryGroup'][];
      /** @description List of delivery order entries group */
      deliveryOrderGroups?: components['schemas']['DeliveryOrderEntryGroup'][];
      /**
       * Format: int64
       * @description Quantity of pickup items
       */
      pickupItemsQuantity?: number;
      /**
       * Format: int64
       * @description Quantity of delivery items
       */
      deliveryItemsQuantity?: number;
      /** @description Customer requested date for order retrieval */
      requestedRetrievalAt?: string;
      /**
       * Format: int32
       * @description Total unit count
       */
      totalUnitCount?: number;
      /** @description List of potential order promotions for cart */
      potentialOrderPromotions?: components['schemas']['PromotionResult'][];
      /** @description List of potential product promotions for cart */
      potentialProductPromotions?: components['schemas']['PromotionResult'][];
      /** @description Name of the cart */
      name?: string;
      /** @description Description of the cart */
      description?: string;
      /**
       * Format: date-time
       * @description Date of cart expiration time
       * @example 2024-12-02T14:24:45+01:00
       */
      expirationTime?: string;
      /**
       * Format: date-time
       * @description Date of saving cart
       * @example 2024-12-02T14:24:45+01:00
       */
      saveTime?: string;
      savedBy?: components['schemas']['Principal'];
      /** @description Earliest possible retrieval date available for order */
      earliestRetrievalAt?: string;
    };
    /** @description Representation of a Cart list */
    CartList: {
      /** @description List of carts */
      carts?: components['schemas']['Cart'][];
    };
    /** @description Representation of a Cart modification */
    CartModification: {
      /** @description Status code of cart modification */
      statusCode?: string;
      /**
       * Format: int64
       * @description Quantity added with cart modification
       */
      quantityAdded?: number;
      /**
       * Format: int64
       * @description Final quantity after cart modification
       */
      quantity?: number;
      entry?: components['schemas']['OrderEntry'];
      /** @description Delivery mode changed */
      deliveryModeChanged?: boolean;
      /** @description Status message */
      statusMessage?: string;
    };
    /** @description Representation of a Cart modification list */
    CartModificationList: {
      /** @description List of cart modifications */
      cartModifications?: components['schemas']['CartModification'][];
    };
    /** @description Representation of a Catalog */
    Catalog: {
      /** @description Identifier of abstract catalog item */
      id?: string;
      /**
       * Format: date-time
       * @description Date of last modification
       * @example 2024-12-02T14:24:47+01:00
       */
      lastModified?: string;
      /** @description Name of abstract catalog item */
      name?: string;
      /** @description Url address of abstract catalog item */
      url?: string;
      /** @description List of versions of catalog */
      catalogVersions?: components['schemas']['CatalogVersion'][];
    };
    /** @description Representation of a Catalog List */
    CatalogList: {
      /** @description List of catalog items */
      catalogs?: components['schemas']['Catalog'][];
    };
    /** @description Representation of a Catalog Version */
    CatalogVersion: {
      /** @description Identifier of abstract catalog item */
      id?: string;
      /**
       * Format: date-time
       * @description Date of last modification
       * @example 2024-12-02T14:24:47+01:00
       */
      lastModified?: string;
      /** @description Name of abstract catalog item */
      name?: string;
      /** @description Url address of abstract catalog item */
      url?: string;
      /** @description List of category hierarchies */
      categories?: components['schemas']['CategoryHierarchy'][];
    };
    /** @description Representation of a Category */
    Category: {
      /** @description Code of the category */
      code?: string;
      /** @description Name of the category */
      name?: string;
      /** @description URL of the category */
      url?: string;
      image?: components['schemas']['Image'];
    };
    /** @description Representation of a Category Hierarchy */
    CategoryHierarchy: {
      /** @description Identifier of abstract catalog item */
      id?: string;
      /**
       * Format: date-time
       * @description Date of last modification
       * @example 2024-12-02T14:24:47+01:00
       */
      lastModified?: string;
      /** @description Name of abstract catalog item */
      name?: string;
      /** @description Url address of abstract catalog item */
      url?: string;
      /** @description List of subcategory hierarchies */
      subcategories?: components['schemas']['CategoryHierarchy'][];
    };
    CheckoutComAPMConfigurationList: {
      availableApmConfigurations?: components['schemas']['CheckoutComAPMConfiguration'][];
    };
    CheckoutComAPMConfiguration: {
      code?: string;
      name?: string;
      isRedirect?: boolean;
      isUserDataRequired?: boolean;
      media?: components['schemas']['Media'];
    };
    /** @description Representation of a Classification */
    Classification: {
      /** @description Code of the classification */
      code?: string;
      /** @description Name of the classification */
      name?: string;
      /** @description List of features for given classification */
      features?: components['schemas']['Feature'][];
    };
    /** @description List of component identifiers */
    ComponentIDList: {
      idList?: string[];
    };
    ComponentList: {
      component?: components['schemas']['Component'][];
    };
    Component: {
      uid?: string;
      uuid?: string;
      typeCode?: string;
      /**
       * Format: date-time
       * @example 2024-12-02T14:24:47+01:00
       */
      modifiedtime?: string;
      name?: string;
      otherProperties?: { [key: string]: { [key: string]: unknown } };
    };
    /** @description Representation of a Configuration Info */
    ConfigurationInfo: {
      /** @description Type of configuration info */
      configuratorType?: string;
      /** @description Status of configuration info */
      status?: string;
      /** @description Label of configuration info */
      configurationLabel?: string;
      /** @description Value of configuration info */
      configurationValue?: string;
    };
    /** @description Representation of a Consent */
    Consent: {
      /** @description Code of consent */
      code?: string;
      /**
       * Format: date-time
       * @description Date of consenting
       * @example 2024-12-02T14:24:45+01:00
       */
      consentGivenDate?: string;
      /**
       * Format: date-time
       * @description Consent withdrawn date
       * @example 2024-12-02T14:24:45+01:00
       */
      consentWithdrawnDate?: string;
    };
    /** @description Representation of a Consent Template */
    ConsentTemplate: {
      /** @description Consent template identifier */
      id?: string;
      /** @description Consent template name */
      name?: string;
      /** @description Consent template description */
      description?: string;
      /**
       * Format: int32
       * @description Consent template version
       */
      version?: number;
      currentConsent?: components['schemas']['Consent'];
    };
    /** @description Representation of a Consent Template List */
    ConsentTemplateList: {
      /** @description List of consent templates */
      consentTemplates?: components['schemas']['ConsentTemplate'][];
    };
    /** @description Representation of a Consignment */
    Consignment: {
      /** @description Consignment code */
      code?: string;
      /** @description Consignment tracking identifier */
      trackingID?: string;
      /** @description Consignment status */
      status?: string;
      /** @description Consignment status display */
      statusDisplay?: string;
      /**
       * Format: date-time
       * @description Consignment status date
       * @example 2024-12-02T14:24:45+01:00
       */
      statusDate?: string;
      /** @description List of consignment entries */
      entries?: components['schemas']['ConsignmentEntry'][];
      shippingAddress?: components['schemas']['Address'];
      deliveryPointOfService?: components['schemas']['PointOfService'];
      arrivalSlot?: components['schemas']['EntryArrivalSlot'];
    };
    /** @description Representation of a Consignment Entry */
    ConsignmentEntry: {
      orderEntry?: components['schemas']['OrderEntry'];
      /**
       * Format: int64
       * @description Quantity value of Consignment entry
       */
      quantity?: number;
      /**
       * Format: int64
       * @description Shipped quantity
       */
      shippedQuantity?: number;
    };
    ContentSlotList: {
      contentSlot?: components['schemas']['ContentSlot'][];
    };
    ContentSlot: {
      slotId?: string;
      slotUuid?: string;
      position?: string;
      name?: string;
      slotShared?: boolean;
      slotStatus?: string;
      components?: components['schemas']['ComponentList'];
      otherProperties?: { [key: string]: { [key: string]: unknown } };
    };
    /** @description Response body fields which will be returned while fetching the list of countries. The DTO is in XML or .json format */
    Country: {
      /**
       * @description Country code in iso format
       * @example US
       */
      isocode?: string;
      /**
       * @description Name of the country
       * @example United States
       */
      name?: string;
    };
    /** @description List of countries */
    CountryList: {
      /** @description This is the list of Country fields that should be returned in the response body */
      countries?: components['schemas']['Country'][];
    };
    /** @description Object contains information for obtaining a verification token. */
    CreateVerificationTokenInput: {
      /**
       * @description Purpose for which the verification token is requested.
       * @enum {string}
       */
      purpose: 'LOGIN';
      /**
       * @description User login identifier. Target to receive verification token code.
       * @example keenreviewer@sap.com
       */
      loginId: string;
      /**
       * @description User password to authenticate the request. This field is required when the purpose is LOGIN.
       * @example mypwd!0
       */
      password?: string;
    };
    /** @description Representation of a Currency */
    Currency: {
      /** @description Code of the currency in iso format */
      isocode?: string;
      /** @description Name of the currency */
      name?: string;
      /** @description Boolean flag whether currency is active */
      active?: boolean;
      /** @description Symbol of the currency */
      symbol?: string;
    };
    /** @description Representation of a Currency List */
    CurrencyList: {
      /** @description List of currencies */
      currencies?: components['schemas']['Currency'][];
    };
    /** @description Representation of a Delivery mode */
    DeliveryMode: {
      /**
       * @description Code of the delivery mode
       * @example premium-gross
       */
      code?: string;
      /**
       * @description Name of the delivery mode
       * @example Premium Delivery
       */
      name?: string;
      /**
       * @description Description of the delivery mode
       * @example 1-2 business days
       */
      description?: string;
      deliveryCost?: components['schemas']['Price'];
    };
    /** @description Representation of a Delivery mode list */
    DeliveryModeList: {
      /** @description List of delivery modes */
      deliveryModes?: components['schemas']['DeliveryMode'][];
    };
    /** @description Representation of a Delivery Order Entry Group */
    DeliveryOrderEntryGroup: {
      totalPriceWithTax?: components['schemas']['Price'];
      /** @description List of order entries */
      entries?: components['schemas']['OrderEntry'][];
      /**
       * Format: int64
       * @description Quantity of order entries in a group
       */
      quantity?: number;
      deliveryAddress?: components['schemas']['Address'];
    };
    /** @description Records of item arrivals facilitate the tracking and management of item quantities, associated arrival times, and certainty levels. These records distinguish between guaranteed, estimated, and unknown arrival scenarios. */
    EntryArrivalSlot: {
      /**
       * Format: double
       * @description Represents the number of items expected to arrive.
       * @example 12
       */
      quantity?: number;
      /**
       * Format: date-time
       * @description The date associated with the expected arrival slot.
       * @example 2024-01-18T17:40:46+05:30
       */
      at?: string;
      /**
       * @description The accuracy of the arrival slot as estimated, or unknown.
       * @example ESTIMATED
       * @enum {string}
       */
      accuracy?: 'ESTIMATED' | 'UNKNOWN';
    };
    /** @description Representation of an Entry Group */
    EntryGroup: {
      /** @description List of order entries */
      entries?: components['schemas']['OrderEntry'][];
      /** @description List of child entry groups */
      entryGroups?: components['schemas']['EntryGroup'][];
      /**
       * Format: int32
       * @description Identifier of the entry group
       * @example 1
       */
      entryGroupNumber?: number;
      /**
       * @description Label for the entry group
       * @example Photo On The Go Package
       */
      label?: string;
      /**
       * @description Indicates if the entry group is in an error state
       * @example true
       */
      erroneous?: boolean;
      /**
       * @description Indicates type of the group, possible values are STANDALONE, CONFIGURABLEBUNDLE or any customer implemented type for any new provider
       * @example STANDALONE
       */
      type?: string;
    };
    /** @description Representation of a Facet */
    Facet: {
      /** @description Name of the facet */
      name?: string;
      /**
       * Format: int32
       * @description Priority value of the facet
       */
      priority?: number;
      /** @description Flag stating if facet is category facet */
      category?: boolean;
      /** @description Flag stating if facet is multiSelect */
      multiSelect?: boolean;
      /** @description Flag stating if facet is visible */
      visible?: boolean;
      /** @description List of top facet values */
      topValues?: components['schemas']['FacetValue'][];
      /** @description List of all facet values */
      values?: components['schemas']['FacetValue'][];
    };
    /** @description Representation of a Facet Value */
    FacetValue: {
      /** @description Name of the facet value */
      name?: string;
      /**
       * Format: int64
       * @description Count of the facet value
       */
      count?: number;
      query?: components['schemas']['SearchState'];
      /** @description Flag stating if facet value is selected */
      selected?: boolean;
    };
    /** @description Representation of a Feature */
    Feature: {
      /** @description Code of the feature */
      code?: string;
      /** @description Name of the feature */
      name?: string;
      /** @description Description of the feature */
      description?: string;
      /** @description Type of the feature */
      type?: string;
      /** @description Range number of the feature */
      range?: boolean;
      /** @description Flag defining it feature is comparable */
      comparable?: boolean;
      featureUnit?: components['schemas']['FeatureUnit'];
      /** @description List of feature values */
      featureValues?: components['schemas']['FeatureValue'][];
    };
    /** @description Representation of a Feature Unit */
    FeatureUnit: {
      /** @description Symbol of the feature unit */
      symbol?: string;
      /** @description Name of the feature unit */
      name?: string;
      /** @description Type of the feature unit */
      unitType?: string;
    };
    /** @description Representation of a Feature Value */
    FeatureValue: {
      /** @description Value of the feature */
      value?: string;
    };
    /** @description Representation of a Future Stock */
    FutureStock: {
      stock?: components['schemas']['Stock'];
      /**
       * Format: date-time
       * @description Date of future stock
       * @example 2024-12-02T14:24:44+01:00
       */
      date?: string;
      /**
       * @description Date of future stock expressed in text value
       * @example 31/12/2056
       */
      formattedDate?: string;
    };
    /** @description Representation of a GeoPoint */
    GeoPoint: {
      /**
       * Format: double
       * @description Geopoint latitude
       */
      latitude?: number;
      /**
       * Format: double
       * @description Geopoint longitude
       */
      longitude?: number;
    };
    GooglePayAuthorisationRequest: {
      token?: components['schemas']['GooglePayPaymentToken'];
      billingAddress?: components['schemas']['GooglePayPaymentContact'];
      shippingAddress?: components['schemas']['GooglePayPaymentContact'];
      email?: string;
      /** @enum {string} */
      tokenFormat?: 'CRYPTOGRAM_3DS' | 'PAN_ONLY';
    };
    GooglePayBillingAddressParametersFormat: {
      format?: string;
    };
    GooglePayClientSettings: {
      environment?: string;
    };
    GooglePayIntermediateAddress: {
      administrativeArea?: string;
      countryCode?: string;
      locality?: string;
      postalCode?: string;
      address1?: string;
      address2?: string;
      address3?: string;
      name?: string;
      sortingCode?: string;
      email?: string;
    };
    GooglePayIntermediatePaymentData: {
      callbackTrigger?: string;
      shippingAddress?: components['schemas']['GooglePayIntermediateAddress'];
      shippingOptionData?: components['schemas']['GooglePaySelectionOptionData'];
    };
    GooglePayMerchantConfiguration: {
      baseCardPaymentMethod?: components['schemas']['BaseCardPaymentMethod'];
      clientSettings?: components['schemas']['GooglePayClientSettings'];
      gateway?: string;
      gatewayMerchantId?: string;
      merchantName?: string;
      merchantId?: string;
      transactionInfo?: components['schemas']['GooglePayTransactionInfo'];
    };
    GooglePayPaymentContact: {
      administrativeArea?: string;
      countryCode?: string;
      locality?: string;
      postalCode?: string;
      address1?: string;
      address2?: string;
      address3?: string;
      name?: string;
      sortingCode?: string;
      email?: string;
    };
    GooglePayPaymentDataError: {
      reason?: string;
      message?: string;
      intent?: string;
    };
    GooglePayPaymentDataRequestUpdate: {
      newTransactionInfo?: components['schemas']['GooglePayTransactionInfoData'];
      newShippingOptionParameters?: components['schemas']['GooglePayShippingOptionParameters'];
      error?: components['schemas']['GooglePayPaymentDataError'];
    };
    GooglePayPaymentToken: {
      /** @enum {string} */
      walletType?: 'APPLEPAY' | 'GOOGLEPAY';
      protocolVersion?: string;
      signature?: string;
      signedMessage?: string;
    };
    GooglePaySelectionOption: {
      id?: string;
      label?: string;
      description?: string;
    };
    GooglePaySelectionOptionData: {
      id?: string;
    };
    GooglePayShippingOptionParameters: {
      shippingOptions?: components['schemas']['GooglePaySelectionOption'][];
      defaultSelectedOptionId?: string;
    };
    GooglePayTransactionInfoData: {
      currencyCode?: string;
      totalPrice?: string;
      totalPriceStatus?: string;
    };
    GooglePayTransactionInfo: {
      currencyCode?: string;
      totalPrice?: string;
      totalPriceStatus?: string;
    };
    /** @description Representation of an Image */
    Image: {
      /**
       * @description Type of the image, can be PRIMARY or GALLERY
       * @enum {string}
       */
      imageType?: 'PRIMARY' | 'GALLERY';
      /** @description Format of the image, can be zoom, product, thumbnail, store, cartIcon, etc. */
      format?: string;
      /** @description URL address of the image */
      url?: string;
      /** @description Tooltip content which is visible while image mouse hovering */
      altText?: string;
      /**
       * Format: int32
       * @description Index of the image while displayed in gallery
       */
      galleryIndex?: number;
    };
    KlarnaClientTokenData: {
      success?: boolean;
      clientToken?: string;
      instanceId?: string;
      paymentContext?: string;
      sessionId?: string;
    };
    /** @description Representation of a Language */
    Language: {
      /** @description iso code of the language */
      isocode?: string;
      /** @description name of the language */
      name?: string;
      /** @description name the language in native form */
      nativeName?: string;
      /** @description true/false indicator when the language is active */
      active?: boolean;
    };
    /** @description Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned */
    LanguageList: {
      /** @description This is the list of Language fields that should be returned in the response body */
      languages?: components['schemas']['Language'][];
    };
    Media: {
      code?: string;
      catalogId?: string;
      catalogVersion?: string;
      mime?: string;
      altText?: string;
      description?: string;
      url?: string;
      downloadUrl?: string;
    };
    /** @description List of users to assign to customer group. */
    MemberList: {
      /** @description List of member */
      members?: components['schemas']['Principal'][];
    };
    /** @description Representation of an Opening schedule */
    OpeningSchedule: {
      /** @description Name of the opening schedule */
      name?: string;
      /** @description Code of the opening schedule */
      code?: string;
      /** @description List of weekday opening days */
      weekDayOpeningList?: components['schemas']['WeekdayOpeningDay'][];
      /** @description List of special opening days */
      specialDayOpeningList?: components['schemas']['SpecialOpeningDay'][];
    };
    /** @description Representation of an Order */
    Order: {
      /** @description Code number of order */
      code?: string;
      /** @description Flag stating iv value is net-value */
      net?: boolean;
      totalPriceWithTax?: components['schemas']['Price'];
      totalPrice?: components['schemas']['Price'];
      totalTax?: components['schemas']['Price'];
      subTotal?: components['schemas']['Price'];
      deliveryCost?: components['schemas']['Price'];
      /** @description List of order entries */
      entries?: components['schemas']['OrderEntry'][];
      /** @description List of entry groups */
      entryGroups?: components['schemas']['EntryGroup'][];
      /** Format: int32 */
      totalItems?: number;
      deliveryMode?: components['schemas']['DeliveryMode'];
      deliveryAddress?: components['schemas']['Address'];
      paymentInfo?: components['schemas']['PaymentDetails'];
      /** @description List of applied order promotions */
      appliedOrderPromotions?: components['schemas']['PromotionResult'][];
      /** @description List of applied product promotions */
      appliedProductPromotions?: components['schemas']['PromotionResult'][];
      productDiscounts?: components['schemas']['Price'];
      orderDiscounts?: components['schemas']['Price'];
      totalDiscounts?: components['schemas']['Price'];
      /** @description Site */
      site?: string;
      /** @description Store */
      store?: string;
      /** @description Guest user id identifier */
      guid?: string;
      /** @description Flag showing if order is calculated */
      calculated?: boolean;
      /** @description List of applied vouchers */
      appliedVouchers?: components['schemas']['Voucher'][];
      user?: components['schemas']['Principal'];
      /** @description List of pickup order entry group */
      pickupOrderGroups?: components['schemas']['PickupOrderEntryGroup'][];
      /** @description List of delivery order entries group */
      deliveryOrderGroups?: components['schemas']['DeliveryOrderEntryGroup'][];
      /**
       * Format: int64
       * @description Quantity of pickup items
       */
      pickupItemsQuantity?: number;
      /**
       * Format: int64
       * @description Quantity of delivery items
       */
      deliveryItemsQuantity?: number;
      /** @description Customer requested date for order retrieval */
      requestedRetrievalAt?: string;
      /**
       * Format: date-time
       * @description Date of order creation
       * @example 2024-12-02T14:24:45+01:00
       */
      created?: string;
      /** @description Status of order */
      status?: string;
      /** @description Status display */
      statusDisplay?: string;
      /** @description Flag showing if customer is Guest customer */
      guestCustomer?: boolean;
      /** @description List of consignment */
      consignments?: components['schemas']['Consignment'][];
      /** @description Order delivery status */
      deliveryStatus?: string;
      /** @description Order delivery status display */
      deliveryStatusDisplay?: string;
      /** @description List of unconsigned order entries */
      unconsignedEntries?: components['schemas']['OrderEntry'][];
      /**
       * @description Boolean flag showing if order is cancellable
       * @example true
       */
      cancellable?: boolean;
      /**
       * @description Boolean flag showing if order is returnable
       * @example true
       */
      returnable?: boolean;
      redirectUrl?: string;
      qrCodeData?: string;
      paymentType?: string;
    };
    /**
     * @description Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)
     *
     * The DTO is in XML or .json format.
     */
    OrderEntry: {
      /**
       * Format: int32
       * @description Entry number of the order entry
       */
      entryNumber?: number;
      /**
       * Format: int64
       * @description Quantity number of items in order entry
       */
      quantity?: number;
      basePrice?: components['schemas']['Price'];
      totalPrice?: components['schemas']['Price'];
      product?: components['schemas']['Product'];
      /** @description Flag defining if order entry item is updateable */
      updateable?: boolean;
      deliveryMode?: components['schemas']['DeliveryMode'];
      /** @description Configuration info of order entry */
      configurationInfos?: components['schemas']['ConfigurationInfo'][];
      /** @description List of aggregated status information per entry, relevant if the entry is configurable and its configuration contains one or many issues in different severities. Note that configurators typically raise such issues only in case the parent document is changeable. In this case the issues (depending on their severity) need to be fixed before a checkout can be done. This means this segment can be present for a cart entry, for order entries it will always be empty */
      statusSummaryList?: components['schemas']['StatusSummary'][];
      deliveryPointOfService?: components['schemas']['PointOfService'];
      cancelledItemsPrice?: components['schemas']['Price'];
      /**
       * Format: int64
       * @description Quantity number of cancellable items in order entry
       * @example 5
       */
      cancellableQuantity?: number;
      returnedItemsPrice?: components['schemas']['Price'];
      /**
       * Format: int64
       * @description Quantity number of returnable items in order entry
       * @example 5
       */
      returnableQuantity?: number;
      /** @description List of item arrival slot */
      arrivalSlots?: components['schemas']['EntryArrivalSlot'][];
    };
    /** @description Representation of an Order entry list consumed */
    OrderEntryList: {
      /** @description List of order entries */
      orderEntries?: components['schemas']['OrderEntry'][];
    };
    /** @description Representation of an Order History */
    OrderHistory: {
      /** @description Code of Order History */
      code?: string;
      /** @description Status of Order History */
      status?: string;
      /** @description Status display */
      statusDisplay?: string;
      /**
       * Format: date-time
       * @description Date of placing order
       * @example 2024-12-02T14:24:46+01:00
       */
      placed?: string;
      /** @description Guest user identifier */
      guid?: string;
      total?: components['schemas']['Price'];
    };
    /** @description Representation of an Order History List */
    OrderHistoryList: {
      /** @description List of order history items */
      orders?: components['schemas']['OrderHistory'][];
      /** @description List of sorts */
      sorts?: components['schemas']['Sort'][];
      pagination?: components['schemas']['deprecatedPagination'];
    };
    /** @description Representation of an Order Status Update Element */
    OrderStatusUpdateElement: {
      /** @description Code of update element of order status */
      code?: string;
      /** @description Status of update element */
      status?: string;
      /** @description BaseSite identifier */
      baseSiteId?: string;
    };
    /** @description Representation of an Order Status Update Element List */
    OrderStatusUpdateElementList: {
      /** @description List of order status update elements */
      orderStatusUpdateElements?: components['schemas']['OrderStatusUpdateElement'][];
    };
    /** @description Object contains information required for creating and sending a token to restore a forgotten password. */
    PasswordRestoreTokenInput: {
      /**
       * @description User login identifier. Target to receive the token.
       * @example keenreviewer@sap.com
       */
      loginId: string;
    };
    /** @description Payment details object */
    PaymentDetails: {
      /** @description Unique identifier of payment detail */
      id?: string;
      /** @description Name of account holder */
      accountHolderName?: string;
      cardType?: components['schemas']['CardType'];
      /** @description Payment card number */
      cardNumber?: string;
      /** @description Start month from which payment is valid */
      startMonth?: string;
      /** @description Start year from which payment is valid */
      startYear?: string;
      /** @description Month of expiration of payment */
      expiryMonth?: string;
      /** @description Year of expiration of payment */
      expiryYear?: string;
      /** @description Issue number */
      issueNumber?: string;
      /** @description Identifier of subscription */
      subscriptionId?: string;
      /** @description Flag to mark if payment is saved one */
      saved?: boolean;
      /** @description Flag to mark if payment the default one */
      defaultPayment?: boolean;
      billingAddress?: components['schemas']['Address'];
      paymentToken?: string;
      paymentType?: string;
      type?: string;
      cardBin?: string;
      mobileNumber?: string;
      bic?: string;
      accountNumber?: string;
      accountType?: string;
      paymentMethod?: string;
      bankCode?: string;
      routingNumber?: string;
      companyName?: string;
      accountIban?: string;
      firstName?: string;
      lastName?: string;
      addressLine1?: string;
      addressLine2?: string;
      postalCode?: string;
      city?: string;
      country?: string;
      authorizationToken?: string;
      document?: string;
      scheme?: string;
      paymentContextId?: string;
    };
    /** @description Representation of a Payment details list */
    PaymentDetailsList: {
      /** @description List of payment details */
      payments?: components['schemas']['PaymentDetails'][];
    };
    /** @description Representation of a Payment Mode */
    PaymentMode: {
      /** @description Payment mode code */
      code?: string;
      /** @description Payment mode name */
      name?: string;
      /** @description Payment mode description */
      description?: string;
    };
    /** @description Representation of a Payment Mode List */
    PaymentModeList: {
      /** @description List of payment modes */
      paymentModes?: components['schemas']['PaymentMode'][];
    };
    PaymentRequest: {
      postUrl?: string;
      parameters?: { [key: string]: string };
      mappingLabels?: { [key: string]: string };
    };
    /** @description Representation of a Pickup Order Entry Group */
    PickupOrderEntryGroup: {
      totalPriceWithTax?: components['schemas']['Price'];
      /** @description List of order entries */
      entries?: components['schemas']['OrderEntry'][];
      /**
       * Format: int64
       * @description Quantity of order entries in a group
       */
      quantity?: number;
      deliveryPointOfService?: components['schemas']['PointOfService'];
      /**
       * Format: double
       * @description Distance calculated to pickup place
       */
      distance?: number;
    };
    PlaceWalletOrder: {
      orderData?: components['schemas']['Order'];
      /** @enum {string} */
      status?: 'SUCCESS' | 'FAILURE';
      errorMessage?: string;
      redirectUrl?: string;
    };
    PlaidLinkCreationResponseDTO: {
      publicToken?: string;
      metadata?: components['schemas']['PlaidLinkMetadataResponseDTO'];
      customerConsents?: boolean;
    };
    PlaidLinkMetadataResponseAccountDTO: {
      class_type?: string;
      id?: string;
      mask?: string;
      name?: string;
      subtype?: string;
      type?: string;
      verification_status?: string;
    };
    PlaidLinkMetadataResponseDTO: {
      account?: components['schemas']['PlaidLinkMetadataResponseAccountDTO'];
      accounts?: components['schemas']['PlaidLinkMetadataResponseAccountDTO'][];
      account_id?: string;
      link_session_id?: string;
      public_token?: string;
      status?: string;
      transfer_status?: string;
      institution?: components['schemas']['PlaidLinkMetadataResponseInstitutionDTO'];
    };
    PlaidLinkMetadataResponseInstitutionDTO: {
      institution_id?: string;
      name?: string;
    };
    /** @description Representation of a Point of service */
    PointOfService: {
      /**
       * @description Name of the point of service
       * @example Misato
       */
      name?: string;
      /** @description Display name of the point of service */
      displayName?: string;
      /** @description Url address of the point of service */
      url?: string;
      /** @description Description of the point of service */
      description?: string;
      openingHours?: components['schemas']['OpeningSchedule'];
      /** @description Store content of given point of service */
      storeContent?: string;
      /** @description List of features for a given point of service */
      features?: { [key: string]: string };
      geoPoint?: components['schemas']['GeoPoint'];
      /** @description Distance to the point of service as text value */
      formattedDistance?: string;
      /**
       * Format: double
       * @description Distance to the point of service as number value
       */
      distanceKm?: number;
      mapIcon?: components['schemas']['Image'];
      address?: components['schemas']['Address'];
      /** @description Collection of images associated with a point of service */
      storeImages?: components['schemas']['Image'][];
      /** @description Instructions used for picking up an order in store */
      pickUpInStoreInstructions?: string;
    };
    /** @description Representation of a Point of Service List */
    PointOfServiceList: {
      /** @description List of points of service */
      pointOfServices?: components['schemas']['PointOfService'][];
    };
    /** @description Representation of a Point Of Service Stock */
    PointOfServiceStock: {
      /**
       * @description Name of the point of service
       * @example Misato
       */
      name?: string;
      /** @description Display name of the point of service */
      displayName?: string;
      /** @description Url address of the point of service */
      url?: string;
      /** @description Description of the point of service */
      description?: string;
      openingHours?: components['schemas']['OpeningSchedule'];
      /** @description Store content of given point of service */
      storeContent?: string;
      /** @description List of features for a given point of service */
      features?: { [key: string]: string };
      geoPoint?: components['schemas']['GeoPoint'];
      /** @description Distance to the point of service as text value */
      formattedDistance?: string;
      /**
       * Format: double
       * @description Distance to the point of service as number value
       */
      distanceKm?: number;
      mapIcon?: components['schemas']['Image'];
      address?: components['schemas']['Address'];
      /** @description Collection of images associated with a point of service */
      storeImages?: components['schemas']['Image'][];
      /** @description Instructions used for picking up an order in store */
      pickUpInStoreInstructions?: string;
      stockInfo?: components['schemas']['Stock'];
    };
    /** @description Representation of a Price */
    Price: {
      /**
       * @description Currency iso format
       * @example USD
       */
      currencyIso?: string;
      /** @description Value of price in BigDecimal format */
      value?: number;
      /**
       * @description Type of the price
       * @enum {string}
       */
      priceType?: 'BUY' | 'FROM';
      /** @description Value of price formatted */
      formattedValue?: string;
      /**
       * Format: int64
       * @description Minimum quantity of the price value
       */
      minQuantity?: number;
      /**
       * Format: int64
       * @description Maximum quantity of the price value
       */
      maxQuantity?: number;
    };
    /** @description Representation of a Price Range */
    PriceRange: {
      maxPrice?: components['schemas']['Price'];
      minPrice?: components['schemas']['Price'];
    };
    /** @description Representation of a Principal webservice DTO used for defining User data types */
    Principal: {
      /** @description Unique user identifier */
      uid?: string;
      /** @description Name of the user */
      name?: string;
    };
    /** @description Representation of a Product */
    Product: {
      /** @description Code of the product */
      code?: string;
      /** @description Name of the product */
      name?: string;
      /** @description Url address of the product */
      url?: string;
      /** @description Description of the product */
      description?: string;
      /** @description Flag defining if product is purchasable */
      purchasable?: boolean;
      stock?: components['schemas']['Stock'];
      /** @description List of future stocks */
      futureStocks?: components['schemas']['FutureStock'][];
      /** @description Flag defining if product is available for pickup */
      availableForPickup?: boolean;
      /**
       * Format: double
       * @description Rating number of average value
       */
      averageRating?: number;
      /**
       * Format: int32
       * @description Number of reviews associated with the product
       */
      numberOfReviews?: number;
      /** @description Product summary */
      summary?: string;
      /** @description Data of product manufacturer */
      manufacturer?: string;
      /** @description Variant type of the product */
      variantType?: string;
      price?: components['schemas']['Price'];
      /** @description Information about base product */
      baseProduct?: string;
      /** @description List of images linked to product */
      images?: components['schemas']['Image'][];
      /** @description List of categories product belongs to */
      categories?: components['schemas']['Category'][];
      /** @description List of reviews associated with the product */
      reviews?: components['schemas']['Review'][];
      /** @description List of classifications related to the product */
      classifications?: components['schemas']['Classification'][];
      /** @description List of potential promotions related to the product */
      potentialPromotions?: components['schemas']['Promotion'][];
      /** @description List of variant options related to the product */
      variantOptions?: components['schemas']['VariantOption'][];
      /** @description List of base options related to the product */
      baseOptions?: components['schemas']['BaseOption'][];
      /** @description Flag stating if volume price should be displayed */
      volumePricesFlag?: boolean;
      /** @description List of volume prices */
      volumePrices?: components['schemas']['Price'][];
      /** @description List of product references */
      productReferences?: components['schemas']['ProductReference'][];
      /** @description List of variant matrixes associated with the product */
      variantMatrix?: components['schemas']['VariantMatrixElement'][];
      priceRange?: components['schemas']['PriceRange'];
      /** @description Flag stating if product is multidimensional */
      multidimensional?: boolean;
      /** @description Configurator type related to the product */
      configuratorType?: string;
      /** @description Flag stating if product is configurable */
      configurable?: boolean;
      /** @description Tags associated with the product */
      tags?: string[];
      /**
       * @description Flag specifies whether product can be added to cart. When addToCartDisabled=true, the product is not allowed to be added into cart and the reason is explained through sapAddToCartDisabledMessage; when addToCartDisabled=false, the product is allowed to be added into cart.
       * @example true
       */
      sapAddToCartDisabled?: boolean;
      /**
       * @description Message shows why product can not be added to cart.
       * @example 'EF-S 60mm f/2.8 USM Macro' is not available with 'EOS450D + 18-55 IS Kit'
       */
      sapAddToCartDisabledMessage?: string;
    };
    /** @description Representation of a Product Express Update Element */
    ProductExpressUpdateElement: {
      /** @description Code of product express update element */
      code?: string;
      /** @description Catalog identifier */
      catalogId?: string;
      /** @description Catalog version */
      catalogVersion?: string;
    };
    /** @description Representation of a Product Express Update Element List */
    ProductExpressUpdateElementList: {
      /** @description List of product express update element */
      productExpressUpdateElements?: components['schemas']['ProductExpressUpdateElement'][];
    };
    /** @description Representation of a Product Future Stocks */
    ProductFutureStocks: {
      /**
       * @description Product identifier
       * @example 3318057
       */
      productCode?: string;
      /** @description List of future stocks */
      futureStocks?: components['schemas']['FutureStock'][];
    };
    /** @description Representation of a Product Future Stocks List */
    ProductFutureStocksList: {
      /** @description List of product future stocks */
      productFutureStocks?: components['schemas']['ProductFutureStocks'][];
    };
    /** @description Representation of a Product List */
    ProductList: {
      /** @description List of products */
      products?: components['schemas']['Product'][];
      /** @description Catalog of product list */
      catalog?: string;
      /** @description Version of product list */
      version?: string;
      /**
       * Format: int32
       * @description Total product count
       */
      totalProductCount?: number;
      /**
       * Format: int32
       * @description Total page count
       */
      totalPageCount?: number;
      /**
       * Format: int32
       * @description Number of current page
       */
      currentPage?: number;
    };
    /** @description Representation of a Product Reference */
    ProductReference: {
      /** @description Reference type */
      referenceType?: string;
      /** @description Reference description */
      description?: string;
      /**
       * Format: int32
       * @description Reference quantity
       */
      quantity?: number;
      target?: components['schemas']['Product'];
      /** @description Flag stating if product reference is preselected */
      preselected?: boolean;
    };
    /** @description Representation of a Product Reference List */
    ProductReferenceList: {
      /** @description List of product references */
      references?: components['schemas']['ProductReference'][];
    };
    /** @description Representation of a Product Search Page */
    ProductSearchPage: {
      /** @description Free text search */
      freeTextSearch?: string;
      /** @description Code of category */
      categoryCode?: string;
      /** @description Redirect url address keyword */
      keywordRedirectUrl?: string;
      spellingSuggestion?: components['schemas']['SpellingSuggestion'];
      /** @description List of products */
      products?: components['schemas']['Product'][];
      /** @description List of sorts */
      sorts?: components['schemas']['Sort'][];
      pagination?: components['schemas']['deprecatedPagination'];
      currentQuery?: components['schemas']['SearchState'];
      /** @description List of breadcrumbs info */
      breadcrumbs?: components['schemas']['Breadcrumb'][];
      /** @description List of facets */
      facets?: components['schemas']['Facet'][];
    };
    /** @description Representation of a Promotion */
    Promotion: {
      /** @description Code of the promotion */
      code?: string;
      /** @description Promotion title */
      title?: string;
      /** @description Type of the promotion */
      promotionType?: string;
      /**
       * Format: date-time
       * @description The initial date of the promotion
       * @example 2024-12-02T14:24:44+01:00
       */
      startDate?: string;
      /**
       * Format: date-time
       * @description Last date of validity of the promotion
       * @example 2024-12-02T14:24:44+01:00
       */
      endDate?: string;
      /** @description Description of the promotion */
      description?: string;
      /** @description Message about promotion which is displayed when planning potential promotion. This field has higher priority over promotion description */
      couldFireMessages?: string[];
      /** @description Message fired while the promotion is active. This is info how much you will get when applying the promotion */
      firedMessages?: string[];
      productBanner?: components['schemas']['Image'];
      /** @description Boolean flag if promotion is enabled */
      enabled?: boolean;
      /**
       * Format: int32
       * @description Priority index as numeric value of the promotion. Higher number means higher priority
       */
      priority?: number;
      /** @description Group of the promotion */
      promotionGroup?: string;
      /** @description List of promotion restrictions */
      restrictions?: components['schemas']['PromotionRestriction'][];
    };
    /** @description Representation of a Promotion list */
    PromotionList: {
      /** @description List of promotions */
      promotions?: components['schemas']['Promotion'][];
    };
    /** @description Representation of a Promotion order entry consumed */
    PromotionOrderEntryConsumed: {
      /** @description Order entry code */
      code?: string;
      /**
       * Format: double
       * @description Adjusted unit price for promotion order entry
       */
      adjustedUnitPrice?: number;
      /**
       * Format: int32
       * @description Order entry number
       */
      orderEntryNumber?: number;
      /**
       * Format: int64
       * @description Quantity of promotion order entry
       */
      quantity?: number;
    };
    /** @description Representation of a Promotion Restriction */
    PromotionRestriction: {
      /** @description Type of the promotion restriction */
      restrictionType?: string;
      /** @description Description of the promotion restriction */
      description?: string;
    };
    /** @description Representation of a Promotion result */
    PromotionResult: {
      /** @description Description of promotion result */
      description?: string;
      promotion?: components['schemas']['Promotion'];
      /** @description List of promotion order entries consumed */
      consumedEntries?: components['schemas']['PromotionOrderEntryConsumed'][];
    };
    /** @description Representation of a Promotion result list */
    PromotionResultList: {
      /** @description List of promotion results */
      promotions?: components['schemas']['PromotionResult'][];
    };
    /** @description Response body fields which will be returned while fetching the list of country's regions. */
    Region: {
      /**
       * @description Country and Region code in iso format
       * @example US-NY
       */
      isocode?: string;
      /**
       * @description Region code in short iso form
       * @example NY
       */
      isocodeShort?: string;
      /**
       * @description Country code in iso format
       * @example US
       */
      countryIso?: string;
      /**
       * @description Name of the region
       * @example New York
       */
      name?: string;
    };
    /** @description List of Regions */
    RegionList: {
      /** @description This is the list of Region fields that should be returned in the response body */
      regions?: components['schemas']['Region'][];
    };
    /** @description Representation of a request of replacing an existing user's login id. */
    ReplaceLoginIdInput: {
      /**
       * @description New login id that is a unique string to identify a user.
       * @example mark.rivers@pronto-hw.com
       */
      newLoginId: string;
      /**
       * @description User password
       * @example It'sMyPwd!0
       */
      password: string;
    };
    /** @description Representation of a request of replacing an existing user's password */
    ReplacePasswordInput: {
      /**
       * @description Current password of the customer.
       * @example It'sMyPwd!0
       */
      oldPassword: string;
      /**
       * @description New password of the customer.
       * @example It'sMyPwd!1
       */
      newPassword: string;
    };
    /** @description Request body parameter that contains details such as token and new password */
    ResetPassword: {
      /** @description token value which will be generated as unique string that will be sent with email to allow user for completing reset-password operation */
      token: string;
      /** @description new password string which is required to complete process of resetting password */
      newPassword: string;
    };
    /** @description Representation of a return request for an order */
    ReturnRequest: {
      /**
       * @description Boolean flag for whether the return request is cancellable
       * @example true
       */
      cancellable?: boolean;
      /**
       * @description Return request code
       * @example 00000001
       */
      code?: string;
      /**
       * Format: date-time
       * @description Date of the return request creation
       * @example 2024-12-02T14:24:45+01:00
       */
      creationTime?: string;
      deliveryCost?: components['schemas']['Price'];
      order?: components['schemas']['Order'];
      /** @description Boolean flag for whether there is a delivery cost for refund */
      refundDeliveryCost?: boolean;
      /** @description Entries of the return request which contains information about the returned product */
      returnEntries?: components['schemas']['ReturnRequestEntry'][];
      /** @description URL of the return label */
      returnLabelDownloadUrl?: string;
      /**
       * @description Return merchandise authorization number
       * @example 00000001
       */
      rma?: string;
      /** @description Status of return request */
      status?: string;
      subTotal?: components['schemas']['Price'];
      totalPrice?: components['schemas']['Price'];
    };
    /** @description Representation of a return request entry which contains information about the returned product */
    ReturnRequestEntry: {
      orderEntry?: components['schemas']['OrderEntry'];
      /**
       * Format: int64
       * @description Quantity which is expected to be returned for this return request entry
       * @example 5
       */
      expectedQuantity?: number;
      refundAmount?: components['schemas']['Price'];
    };
    /** @description Representation of a return request entry input for an order */
    ReturnRequestEntryInput: {
      /**
       * Format: int32
       * @description Order entry number of the returned product
       * @example 1
       */
      orderEntryNumber: number;
      /**
       * Format: int64
       * @description Quantity of the product which belongs to the order entry and is requested to be returned
       * @example 5
       */
      quantity: number;
    };
    /** @description Return request input list for the current order. */
    ReturnRequestEntryInputList: {
      /**
       * @description Code of the order which return request is related to
       * @example 00000001
       */
      orderCode: string;
      /** @description Return request entry inputs which contain information about the order entries which are requested to be returned */
      returnRequestEntryInputs: components['schemas']['ReturnRequestEntryInput'][];
    };
    /** @description Representation of an Order Return Request List */
    ReturnRequestList: {
      /** @description List of order return requests */
      returnRequests?: components['schemas']['ReturnRequest'][];
      /** @description List of sorts */
      sorts?: components['schemas']['Sort'][];
      pagination?: components['schemas']['deprecatedPagination'];
    };
    /** @description Return request modification object. */
    ReturnRequestModification: {
      /**
       * @description Status of the return request
       * @enum {string}
       */
      status?: 'CANCELLING';
    };
    /** @description Object contains review details like : rating, alias, headline, comment. */
    Review: {
      /** @description Identifier of review */
      id?: string;
      /** @description Review headline */
      headline?: string;
      /** @description Review comment */
      comment?: string;
      /**
       * Format: double
       * @description Review rating value
       */
      rating?: number;
      /**
       * Format: date-time
       * @description Date of the review
       * @example 2024-12-02T14:24:44+01:00
       */
      date?: string;
      /** @description Alias name for the review */
      alias?: string;
      principal?: components['schemas']['User'];
    };
    /** @description Representation of a Review List */
    ReviewList: {
      /** @description List of reviews */
      reviews?: components['schemas']['Review'][];
    };
    /** @description Representation of an Invoice */
    SAPInvoice: {
      /**
       * @description Invoice Id
       * @example 9560887
       */
      invoiceId?: string;
      /**
       * Format: date-time
       * @description Invoice creation date
       * @example 2020-09-16T04:55:09.505Z
       */
      createdAt?: string;
      totalAmount?: components['schemas']['Price'];
      netAmount?: components['schemas']['Price'];
      /**
       * @description External system identifier where the invoice resides.
       * @example S4SALES
       */
      externalSystemId?: string;
    };
    /** @description Representation of an Invoice List */
    SAPInvoiceList: {
      /** @description list of invoice */
      invoices?: components['schemas']['SAPInvoice'][];
      /** @description sorting information */
      sorts?: components['schemas']['sort'][];
      pagination?: components['schemas']['pagination'];
    };
    /** @description Representation of a Save Cart Result */
    SaveCartResult: {
      savedCartData?: components['schemas']['Cart'];
    };
    /** @description Representation of a Search Query */
    SearchQuery: {
      /** @description Value of search query */
      value?: string;
    };
    /** @description Representation of a Search State */
    SearchState: {
      /** @description Url address of search state */
      url?: string;
      query?: components['schemas']['SearchQuery'];
    };
    /** @description Representation a Sort option */
    Sort: {
      /** @description Code of Sort */
      code?: string;
      /** @description Name of Sort */
      name?: string;
      /** @description Flag stating when Sort is selected */
      selected?: boolean;
    };
    /** @description Representation of a special opening day */
    SpecialOpeningDay: {
      openingTime?: components['schemas']['Time'];
      closingTime?: components['schemas']['Time'];
      /**
       * Format: date-time
       * @description Date of special opening day
       * @example 2024-12-02T14:24:44+01:00
       */
      date?: string;
      /** @description Text representation of the date of special opening day */
      formattedDate?: string;
      /** @description Flag stating if special opening day is closed */
      closed?: boolean;
      /** @description Name of the special opening day event */
      name?: string;
      /** @description Comment field */
      comment?: string;
    };
    /** @description Representation of a Spell Checker Suggestion */
    SpellingSuggestion: {
      /** @description Spelling suggestion */
      suggestion?: string;
      /** @description Query for spelling suggestion */
      query?: string;
    };
    /** @description Representation of a status summary, an aggregated view on issues for a specific status or severity. These issues are attached to configurations of products or order entries */
    StatusSummary: {
      /**
       * @description Status or severity indicator, can be one of ERROR, WARNING, INFO or SUCCESS
       * @example ERROR
       */
      status?: string;
      /**
       * Format: int32
       * @description Number of issues per status
       * @example 3
       */
      numberOfIssues?: number;
    };
    /** @description Representation of a Stock */
    Stock: {
      /**
       * @description Status of stock level
       * @example inStock
       */
      stockLevelStatus?: string;
      /**
       * Format: int64
       * @description Stock level expressed as number
       * @example 25
       */
      stockLevel?: number;
      /** @description Indicate whether Stock level value is rounded */
      isValueRounded?: boolean;
    };
    /** @description Representation of a Store Count */
    StoreCount: {
      /** @description Type of store count */
      type?: string;
      /** @description Name of store count */
      name?: string;
      /** @description Iso code of store */
      isoCode?: string;
      /**
       * Format: int32
       * @description Count
       */
      count?: number;
      /** @description List of store counts */
      storeCountDataList?: components['schemas']['StoreCount'][];
    };
    /** @description Representation of a Store Count List */
    StoreCountList: {
      /** @description List of store counts */
      countriesAndRegionsStoreCount?: components['schemas']['StoreCount'][];
    };
    /** @description Representation of a Store finder search page */
    StoreFinderSearchPage: {
      /** @description List of stores */
      stores?: components['schemas']['PointOfService'][];
      /** @description List of sortings */
      sorts?: components['schemas']['Sort'][];
      pagination?: components['schemas']['deprecatedPagination'];
      /** @description Location text */
      locationText?: string;
      /**
       * Format: double
       * @description Source latitude
       */
      sourceLatitude?: number;
      /**
       * Format: double
       * @description Source longitude
       */
      sourceLongitude?: number;
      /**
       * Format: double
       * @description Bound north latitude
       */
      boundNorthLatitude?: number;
      /**
       * Format: double
       * @description Bound east longitude
       */
      boundEastLongitude?: number;
      /**
       * Format: double
       * @description Bound south latitude
       */
      boundSouthLatitude?: number;
      /**
       * Format: double
       * @description Bound west longitude
       */
      boundWestLongitude?: number;
    };
    /** @description Representation of a Store Finder Stock Search Page */
    StoreFinderStockSearchPage: {
      /** @description List of stores */
      stores?: components['schemas']['PointOfServiceStock'][];
      /** @description List of sorts */
      sorts?: components['schemas']['Sort'][];
      pagination?: components['schemas']['deprecatedPagination'];
      /** @description Location text */
      locationText?: string;
      /**
       * Format: double
       * @description Source latitude
       */
      sourceLatitude?: number;
      /**
       * Format: double
       * @description Source longitude
       */
      sourceLongitude?: number;
      /**
       * Format: double
       * @description Bound to north latitude
       */
      boundNorthLatitude?: number;
      /**
       * Format: double
       * @description Bound to east longitude
       */
      boundEastLongitude?: number;
      /**
       * Format: double
       * @description Bound to south latitude
       */
      boundSouthLatitude?: number;
      /**
       * Format: double
       * @description Bound to west longitude
       */
      boundWestLongitude?: number;
      product?: components['schemas']['Product'];
    };
    /** @description Representation of a Suggestion */
    Suggestion: {
      /** @description Suggestion value */
      value?: string;
    };
    /** @description Representation of a Suggestion List */
    SuggestionList: {
      /** @description List of suggestions */
      suggestions?: components['schemas']['Suggestion'][];
    };
    /** @description Representation of a Time */
    Time: {
      /**
       * Format: byte
       * @description Hour part of the time data
       */
      hour?: string;
      /**
       * Format: byte
       * @description Minute part of the time data
       */
      minute?: string;
      /** @description Formatted hour */
      formattedHour?: string;
    };
    /** @description Representation of a Title */
    Title: {
      /** @description Title code */
      code?: string;
      /** @description Title name */
      name?: string;
    };
    /** @description Representation of a Title List */
    TitleList: {
      /** @description List of titles */
      titles?: components['schemas']['Title'][];
    };
    /** @description User's object. */
    User: {
      /** @description Unique user identifier */
      uid?: string;
      /** @description Name of the user */
      name?: string;
      defaultAddress?: components['schemas']['Address'];
      /** @description User title code */
      titleCode?: string;
      /** @description User title */
      title?: string;
      /** @description User first name */
      firstName?: string;
      /** @description User last name */
      lastName?: string;
      currency?: components['schemas']['Currency'];
      language?: components['schemas']['Language'];
      /** @description User identifier */
      displayUid?: string;
      /** @description Customer identifier */
      customerId?: string;
      /**
       * Format: date-time
       * @description Deactivation date
       * @example 2024-12-02T14:24:44+01:00
       */
      deactivationDate?: string;
      /**
       * @description Name of the default pick up location
       * @example Misato
       */
      defaultPointOfServiceName?: string;
      /**
       * @description The latest cart operated by customer
       * @example 000000001
       */
      lastCartId?: string;
      /** @description Indicates whether customer has order. Default value is false. */
      hasOrder?: boolean;
      userAvatar?: components['schemas']['UserAvatar'];
    };
    /** @description Representation of a profile picture. */
    UserAvatar: {
      /**
       * @description URL of customer profile image in media server. It's optional.
       * @example /medias/?context=bWFzdGVyfHJvb3R8NTMyMDB8aW1hZ2UvanBlZ3xhRGM1TDJneFl5ODROemszTlRNd016a3dOVFU0TG1wd1p3fDViODZlNmFiZTkyNzFjZDFmM2I5ZWU3OGJhZWEzMjViZDBiZTQ2NjM3YzIyMTg
       */
      url?: string;
      /**
       * @description Image format. It's optional.
       * @example jpg
       */
      format?: string;
    };
    /** @description User group object with id and name. */
    UserGroup: {
      /** @description Unique user identifier */
      uid?: string;
      /** @description Name of the user */
      name?: string;
      /** @description List of members */
      members?: components['schemas']['Principal'][];
      /** @description List of subgroups */
      subGroups?: components['schemas']['UserGroup'][];
      /**
       * Format: int32
       * @description Number of members
       */
      membersCount?: number;
    };
    /** @description Representation of a User Group List */
    UserGroupList: {
      /** @description List of user groups */
      userGroups?: components['schemas']['UserGroup'][];
      /**
       * Format: int32
       * @description Total number
       */
      totalNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Number of pages
       */
      numberOfPages?: number;
      /**
       * Format: int32
       * @description Current page
       */
      currentPage?: number;
    };
    /** @description User's object. */
    UserSignUp: {
      /**
       * @description user id, unique string required to create new user. It can be email
       * @example akiro.nakamura@rustic-hw.com
       */
      uid: string;
      /**
       * @description first name of the user
       * @example Arika
       */
      firstName: string;
      /**
       * @description last name of the user
       * @example Nakamura
       */
      lastName: string;
      /** @example mr */
      titleCode?: string;
      /** @description user password */
      password: string;
    };
    /** @description Representation of a Variant Category */
    VariantCategory: {
      /** @description Variant category name */
      name?: string;
      /** @description Flag if varian category has image assigned */
      hasImage?: boolean;
      /**
       * Format: int32
       * @description Priority number of variant category
       */
      priority?: number;
    };
    /** @description Representation of a Variant Matrix Element */
    VariantMatrixElement: {
      variantValueCategory?: components['schemas']['VariantValueCategory'];
      parentVariantCategory?: components['schemas']['VariantCategory'];
      variantOption?: components['schemas']['VariantOption'];
      /** @description List of elements with the type of variant matrix element */
      elements?: components['schemas']['VariantMatrixElement'][];
      isLeaf?: boolean;
    };
    /** @description Representation of a Variant Option */
    VariantOption: {
      /** @description Code of the variant option */
      code?: string;
      stock?: components['schemas']['Stock'];
      /** @description Url address of the variant option */
      url?: string;
      priceData?: components['schemas']['Price'];
      /** @description List of variant option qualifiers */
      variantOptionQualifiers?: components['schemas']['VariantOptionQualifier'][];
    };
    /** @description Representation of a Variant Option Qualifier */
    VariantOptionQualifier: {
      /** @description Qualifier */
      qualifier?: string;
      /** @description Name of variant option qualifier */
      name?: string;
      /** @description Value of variant option qualifier */
      value?: string;
      image?: components['schemas']['Image'];
    };
    /** @description Representation of a Variant Value Category */
    VariantValueCategory: {
      /** @description Name of the variant value category */
      name?: string;
      /**
       * Format: int32
       * @description Sequence number of variant value category
       */
      sequence?: number;
      /** @description Parent category of variant value category */
      superCategories?: components['schemas']['VariantCategory'][];
    };
    /** @description Representation of information for obtained verification token. */
    VerificationToken: {
      /**
       * @description Unique token ID generated for verification request, which is used for authentication along with the token code.
       * @example <LGN[nZbnrnhMWy2uBbzKWU/SQRVBZ7mJaiXX9/87PegvovM=]>
       */
      tokenId: string;
      /**
       * Format: int32
       * @description Verification token expiration time in seconds.
       * @example 300
       */
      expiresIn: number;
    };
    /** @description Representation of a Voucher */
    Voucher: {
      /** @description The identifier of the Voucher. This is the first part of voucher code which holds first 3 letters, like: 123 */
      code?: string;
      /** @description Voucher code, is the holder for keeping specific occasional voucher related to business usage. It can be generated and looks like: 123-H8BC-Y3D5-34AL */
      voucherCode?: string;
      /** @description Name of the voucher */
      name?: string;
      /** @description Description of the voucher */
      description?: string;
      /**
       * Format: double
       * @description Value of the voucher. Example of such value is: 15.0d
       */
      value?: number;
      /** @description Formatted value of the voucher */
      valueFormatted?: string;
      /** @description The value of the voucher to display. Example: 15.0% */
      valueString?: string;
      /** @description Specifies if the order this voucher is applied to is shipped for free (true) or not (false). Defaults to false. */
      freeShipping?: boolean;
      currency?: components['schemas']['Currency'];
      appliedValue?: components['schemas']['Price'];
    };
    /** @description Representation of a Voucher List */
    VoucherList: {
      /** @description List of vouchers */
      vouchers?: components['schemas']['Voucher'][];
    };
    /** @description Representation of a Weekday Opening Day */
    WeekdayOpeningDay: {
      openingTime?: components['schemas']['Time'];
      closingTime?: components['schemas']['Time'];
      /** @description Text representation of week day opening day */
      weekDay?: string;
      /** @description Flag stating if weekday opening day is closed */
      closed?: boolean;
    };
    /** @description Carrier */
    carrier: {
      /** @description Carrier code */
      code?: string;
      /** @description Carrier name */
      name?: string;
    };
    /** @description Consignment tracking data */
    consignmentTracking: {
      /**
       * @description Consignment status
       * @example inTransit
       */
      statusDisplay?: string;
      carrierDetails?: components['schemas']['carrier'];
      /** @description Tracking identifier */
      trackingID?: string;
      /** @description The tracking url provided by the carrier */
      trackingUrl?: string;
      /**
       * Format: date-time
       * @description Target arrival date
       * @example 2024-12-02T14:24:46+01:00
       */
      targetArrivalDate?: string;
      /** @description Logistics tracking information */
      trackingEvents?: components['schemas']['consignmentTrackingEvent'][];
    };
    /** @description Consignment tracking event */
    consignmentTrackingEvent: {
      /**
       * Format: date-time
       * @description Date of tracking event
       * @example 2024-12-02T14:24:46+01:00
       */
      eventDate?: string;
      /** @description Tracking detail */
      detail?: string;
      /** @description Consignment location */
      location?: string;
      /** @description Logistics status */
      referenceCode?: string;
    };
    /** @description Customer interests search page */
    customerInterestsSearchPage: {
      /** @description List of product interest relation */
      results?: components['schemas']['productInterestRelation'][];
      /** @description Sorting information */
      sorts?: components['schemas']['sort'][];
      pagination?: components['schemas']['pagination'];
    };
    /** @description Representation of a search results pagination */
    deprecatedPagination: {
      /**
       * Format: int32
       * @description The number of results per page. A page may have less results if there are less than a full page of results, only on the last page in the results
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description The current page number. The first page is number zero (0), the second page is number one (1), and so on
       */
      currentPage?: number;
      /** @description The selected sort code */
      sort?: string;
      /**
       * Format: int32
       * @description The total number of pages. This is the number of pages, each of pageSize, required to display the totalResults.
       */
      totalPages?: number;
      /**
       * Format: int64
       * @description The total number of matched results across all pages
       */
      totalResults?: number;
    };
    /** @description Error message */
    error: {
      /** @description Type of the error e.g. 'LowStockError'. */
      type?: string;
      /** @description Additional classification specific for each error type e.g. 'noStock'. */
      reason?: string;
      /** @description Descriptive, human readable error message. */
      message?: string;
      /** @description Type of the object related to the error e.g. 'entry'. */
      subjectType?: string;
      /** @description Identifier of the related object e.g. '1'. */
      subject?: string;
      /** @description Error code */
      errorCode?: string;
      /** @example English */
      language?: string;
      /**
       * Format: int32
       * @example 1
       */
      position?: number;
      exceptionMessage?: string;
    };
    /** @description List of errors */
    errorList: {
      errors?: components['schemas']['error'][];
    };
    /** @description Notification preference */
    notificationPreference: {
      /**
       * @description preference channel
       * @example email, sms, site_message
       */
      channel?: string;
      /** @description the corresponding value of current channel, for example, for SMS it should be a mobile number; for email it should be an email address */
      value?: string;
      /** @description if true, the channel is on; if false, the channel is off */
      enabled?: boolean;
      /** @description if true, the channel is visible; if false, the channel is invisible */
      visible?: boolean;
    };
    /** @description Notification preference list */
    notificationPreferenceList: {
      /** @description notification preferences */
      preferences?: components['schemas']['notificationPreference'][];
    };
    /** @description Pagination info */
    pagination: {
      /**
       * Format: int32
       * @description Number of elements on this page
       */
      count?: number;
      /**
       * Format: int64
       * @description Total number of elements
       */
      totalCount?: number;
      /**
       * Format: int32
       * @description Current page number
       */
      page?: number;
      /**
       * Format: int32
       * @description Total number of pages
       */
      totalPages?: number;
      /** @description Indicates if there is next page */
      hasNext?: boolean;
      /** @description Indicates if there is previous page */
      hasPrevious?: boolean;
    };
    /** @description Product interest entry */
    productInterestEntry: {
      /** @description Product interest type */
      interestType?: string;
      /**
       * Format: date-time
       * @description Added date of product interest
       * @example 2024-12-02T14:24:45+01:00
       */
      dateAdded?: string;
      /**
       * Format: date-time
       * @description Expiration date of product interest
       * @example 2024-12-02T14:24:45+01:00
       */
      expirationDate?: string;
    };
    /** @description Product interest relation */
    productInterestRelation: {
      product?: components['schemas']['Product'];
      /** @description List of product interest entry */
      productInterestEntry?: components['schemas']['productInterestEntry'][];
    };
    /** @description Site message */
    siteMessage: {
      /** @description message uid */
      uid?: string;
      /** @description message subject */
      subject?: string;
      /** @description message body */
      body?: string;
      /**
       * @description notification type used for this message
       * @enum {string}
       */
      notificationType?:
        | 'BACK_IN_STOCK'
        | 'COUPON_EFFECTIVE'
        | 'NOTIFICATION'
        | 'COUPON_EXPIRE';
      /**
       * Format: date-time
       * @description sent date
       * @example 2024-12-02T14:24:46+01:00
       */
      sentDate?: string;
    };
    /** @description Site message search result */
    siteMessageSearchResult: {
      /** @description site messages */
      messages?: components['schemas']['siteMessage'][];
      /** @description sorting information */
      sorts?: components['schemas']['sort'][];
      pagination?: components['schemas']['pagination'];
    };
    /** @description Sort option */
    sort: {
      code?: string;
      asc?: boolean;
    };
  };
}

export interface operations {
  /** Retrieves the base sites and the details of the corresponding base stores. */
  getBaseSites: {
    parameters: {
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['BaseSiteList'];
          'application/json': components['schemas']['BaseSiteList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the details of the base store. */
  getBaseStore: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Base store identifier. */
        baseStoreUid: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['BaseStore'];
          'application/json': components['schemas']['BaseStore'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the payment card types defined for the base store. */
  getCardTypes: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CardTypeList'];
          'application/json': components['schemas']['CardTypeList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getCatalogs: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CatalogList'];
          'application/json': components['schemas']['CatalogList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves information about the catalog using catalog identifier. */
  getCatalog: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Catalog identifier. */
        catalogId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Catalog'];
          'application/json': components['schemas']['Catalog'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves information about the catalog version using catalog identifier and catalog version identifier. */
  getCatalogVersion: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Catalog identifier. */
        catalogId: string;
        /** Catalog version identifier. */
        catalogVersionId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CatalogVersion'];
          'application/json': components['schemas']['CatalogVersion'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves information about the category that exists in a catalog version available. */
  getCategories: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Catalog identifier. */
        catalogId: string;
        /** Catalog version identifier. */
        catalogVersionId: string;
        /** Category identifier. */
        categoryId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CategoryHierarchy'];
          'application/json': components['schemas']['CategoryHierarchy'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Retrieves the CMS components using the specified identifiers. If you don't provide any component identifiers, all of the components will be retrieved.
   * The components list is filtered by the specified catalog, product, or category restrictions. The result is sorted according to the sort parameter.
   */
  getComponentsByIds: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Catalog code */
        catalogCode?: string;
        /** Category code */
        categoryCode?: string;
        /** List of Component identifiers */
        componentIds?: string[];
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Number of results returned per page. Default value: 10. */
        pageSize?: number;
        /** Product code */
        productCode?: string;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** ComponentIDListWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['ComponentList'];
          'application/json': components['schemas']['ComponentList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  searchComponentsByIds: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Catalog code */
        catalogCode?: string;
        /** Category code */
        categoryCode?: string;
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Number of results returned per page. Default value: 10. */
        pageSize?: number;
        /** Product code */
        productCode?: string;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** ComponentIDListWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['ComponentList'];
          'application/json': components['schemas']['ComponentList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ComponentIDList'];
      };
    };
  };
  /** Retrieves the CMS component data. */
  getComponentById: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Component identifier */
        componentId: string;
      };
      query: {
        /** Catalog code */
        catalogCode?: string;
        /** Category code */
        categoryCode?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Product code */
        productCode?: string;
      };
    };
    responses: {
      /** ComponentWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['Component'];
          'application/json': components['schemas']['Component'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Retrieves the page data and CMS content slots using the pageLabel/pageId or the code parameter. If you don't provide a value for one of these parameters, the homepage CMS content slots are retrieved.
   * Content pages can be filtered using pageLabel/pageId while the other page types can be filtered using the specified code.
   */
  getPage: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Page code. Examples: homepage, electronics, cameras, 585. */
        code?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Page id. When pageId is provided, pageLabelOrId will be ignored. */
        pageId?: string;
        /**
         * Page label. If no page has a label that matches the page label exactly, try to find pages whose label starts with a section of the page label.
         * Note: URL encoding on the page label should be applied when the label contains special characters. When pageLabel is provided, pageLabelOrId will be ignored.
         */
        pageLabel?: string;
        /**
         * Page Label or Id. If no page has a label that matches the page label exactly, try to find pages whose label starts with a section of the page label. Otherwise, try to find the page by id.
         * When label and ID values can match, passing in the pageId parameter may result in obtaining variation pages with the same pageLabel but different pageId. Therefore, it is advisable to use both the pageId and pageLabel parameters to ensure accuracy.Note: URL encoding on the page label should be applied when the label contains special characters.
         */
        pageLabelOrId?: string;
        /** Page type */
        pageType?:
          | 'ContentPage'
          | 'ProductPage'
          | 'CategoryPage'
          | 'CatalogPage';
      };
    };
    responses: {
      /** CMSPageWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['CMSPage'];
          'application/json': components['schemas']['CMSPage'];
        };
      };
      /** Should not pass both pageLabel and pageId simultaneously. (InvalidPageQualifierException) */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the page data and CMS content slots, each of which contains a list of CMS component data. The page identifier is required. */
  getPageById: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Page Id */
        pageId: string;
      };
      query: {
        /** Category code */
        categoryCode?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Product code */
        productCode?: string;
      };
    };
    responses: {
      /** CMSPageWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['CMSPage'];
          'application/json': components['schemas']['CMSPage'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getAllPages: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Number of results returned per page. Default value: 10. */
        pageSize?: number;
        /** Page type. */
        pageType?:
          | 'ContentPage'
          | 'ProductPage'
          | 'CategoryPage'
          | 'CatalogPage';
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** CMSPageListWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['CMSPageList'];
          'application/json': components['schemas']['CMSPageList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of shipping or billing countries. Set the type parameter to SHIPPING to retrieve the shipping countries. Set the type parameter to BILLING to retrieve the billing countries. Leave the type parameter blank to retrieve all of the countries. The list is sorted alphabetically. */
  getCountries: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** The type of countries. */
        type?: 'SHIPPING' | 'BILLING';
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CountryList'];
          'application/json': components['schemas']['CountryList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the list of regions in a country. */
  getCountryRegions: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** An ISO code for a country */
        countyIsoCode: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['RegionList'];
          'application/json': components['schemas']['RegionList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of available currencies for the current base store. If the currency list is empty, all of the currencies available in the system are returned. */
  getCurrencies: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CurrencyList'];
          'application/json': components['schemas']['CurrencyList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the subgroup information of a customer group. To perform this call, you must be an authorized member of the customermanagergroup. */
  getCustomerGroups: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Number of results returned per page. */
        pageSize?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['UserGroupList'];
          'application/json': components['schemas']['UserGroupList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Creates a new customer group that is a direct subgroup of a customergroup.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
   */
  createCustomerGroup: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['UserGroup'];
        'application/json': components['schemas']['UserGroup'];
      };
    };
  };
  /** Retrieves a customer group. To try out the methods of the customer groups controller, authorize a customer who belongs to the customermanagergroup. */
  getCustomerGroup: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Group identifier. */
        groupId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['UserGroup'];
          'application/json': components['schemas']['UserGroup'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Sets members for a user group. The list of existing members is overwritten with a new one.
   *
   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
   */
  replaceUsersForCustomerGroup: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Group identifier. */
        groupId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['MemberList'];
        'application/json': components['schemas']['MemberList'];
      };
    };
  };
  /** Assigns members to a customer group. To perform this call, you must be an authorized member of the customermanagergroup. */
  updateCustomerGroupWithUsers: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Group identifier. */
        groupId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['MemberList'];
        'application/json': components['schemas']['MemberList'];
      };
    };
  };
  /** Deletes the customer from a customer group. To try out the methods in the customer groups controller, authorize a customer who belongs to the customermanagergroup. */
  removeUsersFromCustomerGroup: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Group identifier. */
        groupId: string;
        /** User identifier or one of the literals: ‘current’ for currently authenticated user, ‘anonymous’ for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of the supported delivery countries for the current store. The list is sorted alphabetically. */
  getDeliveryCountries: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CountryList'];
          'application/json': components['schemas']['CountryList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves all of the products or only the products that were modified after the time in the timestamp parameter. */
  getExportedProducts: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Only products from this catalog are returned. The catalog must be provided along with the version. */
        catalog?: string;
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Number of results returned per page. */
        pageSize?: number;
        /** Only products that are more recent than the given parameter are returned. The value should be in ISO-8601 format: 2018-01-09T16:28:45+0000. */
        timestamp?: string;
        /** Only products from this catalog version are returned. The catalog version must be provided along with the catalog. */
        version?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ProductList'];
          'application/json': components['schemas']['ProductList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the orders that have changed status. Only the properties from the current baseSite that have been updated after the specified timestamp are returned. */
  getOrderStatusFeed: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Only items newer than the given parameter are retrieved. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000). */
        timestamp: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['OrderStatusUpdateElementList'];
          'application/json': components['schemas']['OrderStatusUpdateElementList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a token so that customers can restore their forgotten passwords. */
  doRestorePassword: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Customer's user id. Customer user id is case insensitive. */
        userId: string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Validates the decision of the merchant.
   *
   * Note: The execution of the “Try it out” button always returns an error because the merchant callback controller handles parameters differently depending on which payment provider is used.
   */
  doHandleMerchantCallback: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Handles and validates the decision of the merchant for a cart.The PaymentSubscriptionResult is stored for the cart.
   *
   * Note: The execution of the “Try it out” button always returns an error because the merchant callback controller handles parameters differently, depending on which payment provider is used.
   */
  doHandleCartMerchantCallback: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of the available languages of the base store. If the language list is empty, all of the languages available in the system are returned. */
  getLanguages: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['LanguageList'];
          'application/json': components['schemas']['LanguageList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getMerchantKey: {
    responses: {
      /** OK */
      200: {
        content: {
          'text/plain': string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  isMerchantABC: {
    responses: {
      /** OK */
      200: {
        content: {
          'text/plain': string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the details of the order using the Globally Unique Identifier (GUID) or the order code. To get entryGroup information, set fields value as follows: fields=entryGroups(BASIC), fields=entryGroups(DEFAULT), or fields=entryGroups(FULL). */
  getOrder: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order GUID or order code. */
        code: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Order'];
          'application/json': components['schemas']['Order'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates and sends a token that is used to restore a forgotten password in a following asynchronous customer communication. */
  sendPasswordRestoreToken: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PasswordRestoreTokenInput'];
      };
    };
  };
  /** Retrieves the payment modes defined for the base store. */
  getPaymentModes: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PaymentModeList'];
          'application/json': components['schemas']['PaymentModeList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves products that were added to the express update feed. Only the properties that were updated after the specified timestamp are returned. The queue is cleared using a defined cronjob. */
  getExpressUpdateProducts: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Only products from this catalog are returned. Format: catalogId:catalogVersion. */
        catalog?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Only products that are more recent than the given parameter are returned. The value should be in ISO-8601 format: 2018-01-09T16:28:45+0000. */
        timestamp: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ProductExpressUpdateElementList'];
          'application/json': components['schemas']['ProductExpressUpdateElementList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of products and related product search data, such as available facets, available sorting, and spelling suggestions. To enable spelling suggestions, you need to have indexed properties configured to be used for spell checking. */
  getProducts: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Number of results returned per page. */
        pageSize?: number;
        /** Formatted query string. It contains query criteria like free text search, facet. The format is <freeTextSearch>:<sort>:<facetKey1>:<facetValue1>:...:<facetKeyN>:<facetValueN>. */
        query?: string;
        /** Name of the search query template to be used in the search query. Examples: DEFAULT, SUGGESTIONS. */
        searchQueryContext?: string;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ProductSearchPage'];
          'application/json': components['schemas']['ProductSearchPage'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** In the response header, the "x-total-count" property indicates the total number of products for the query. */
  countProducts: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Formatted query string. It contains query criteria like free text search, facet. The format is <freeTextSearch>:<sort>:<facetKey1>:<facetValue1>:...:<facetKeyN>:<facetValueN>. */
        query?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the suggestions related to a specified term and limits the results according to the value of the max parameter. */
  getSuggestions: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Maximum number of results. */
        max?: number;
        /** Specified term. The suggestions will be given based on it. */
        term: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['SuggestionList'];
          'application/json': components['schemas']['SuggestionList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the details of a single product using the product identifier. */
  getProduct: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Product'];
          'application/json': components['schemas']['Product'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the references using the product code and reference type. */
  getProductReferences: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Number of results returned per page. */
        pageSize?: number;
        /** Comma-separated list of reference types. If not specified, all types of product references will be used. Example: ACCESSORIES,BASE_PRODUCT. */
        referenceType?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ProductReferenceList'];
          'application/json': components['schemas']['ProductReferenceList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves all the reviews for a product. To limit the number of reviews returned, use the maxCount parameter. */
  getProductReviews: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Maximum number of reviews. */
        maxCount?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ReviewList'];
          'application/json': components['schemas']['ReviewList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a customer review for a product as an anonymous user. */
  createProductReview: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Review'];
          'application/json': components['schemas']['Review'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Review'];
        'application/json': components['schemas']['Review'];
      };
    };
  };
  /** The stock levels are sorted by distance from the specified location, which is defined using the free-text location parameter or the longitude and latitude parameters. Either location parameter or longitude and latitude parameters are required. */
  getLocationProductStock: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Coordinate that specifies the north-south position of a point on the Earth's surface. */
        latitude?: number;
        /** Free-text location */
        location?: string;
        /** Coordinate that specifies the east-west position of a point on the Earth's surface. */
        longitude?: number;
        /** Number of results returned per page. */
        pageSize?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['StoreFinderStockSearchPage'];
          'application/json': components['schemas']['StoreFinderStockSearchPage'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** In the response header, the "x-total-count" property indicates the total number of stock levels of a product. Either location parameter or longitude and latitude parameters are required. */
  countProductStockByLocation: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
      };
      query: {
        /** Coordinate that specifies the north-south position of a point on the Earth's surface. */
        latitude?: number;
        /** Free-text location */
        location?: string;
        /** Coordinate that specifies the east-west position of a point on the Earth's surface. */
        longitude?: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the stock level of a product for the store. */
  getStoreProductStock: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
        /** Store identifier. */
        storeName: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Stock'];
          'application/json': components['schemas']['Stock'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the promotions defined for a current base site. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine. */
  getPromotions: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Only promotions from this group are returned */
        promotionGroup?: string;
        /** Type of promotions that should be returned. Possible values are: <ul><li>all: All available promotions are returned. </li><li>product: Only product promotions are returned. </li><li>order: Only order promotions are returned. </li></ul> */
        type: 'all' | 'product' | 'order';
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PromotionList'];
          'application/json': components['schemas']['PromotionList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the details of a promotion using the specified code. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine. */
  getPromotion: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Promotion identifier (code) */
        code: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Promotion'];
          'application/json': components['schemas']['Promotion'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Reset password after customer's clicked forgotten password link. A new password needs to be provided. */
  doResetPassword: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['ResetPassword'];
        'application/json': components['schemas']['ResetPassword'];
      };
    };
  };
  /** Retrieves the store locations that are near the location specified in a query or the latitude and longitude parameters. */
  getStoreLocations: {
    parameters: {
      query: {
        /** Accuracy in meters. */
        accuracy?: number;
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Coordinate that specifies the north-south position of a point on the Earth's surface. */
        latitude?: number;
        /** Coordinate that specifies the east-west position of a point on the Earth's surface. */
        longitude?: number;
        /** Number of results returned per page. */
        pageSize?: number;
        /** Location in plain text. Example: USA or New York City */
        query?: string;
        /** Radius in meters. Max value: 40075000.0 (Earth's perimeter). */
        radius?: number;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['StoreFinderSearchPage'];
          'application/json': components['schemas']['StoreFinderSearchPage'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** In the response header, the "x-total-count" indicates the number of all stores that are near the location specified in the query or based on latitude and longitude. */
  countStoreLocations: {
    parameters: {
      query: {
        /** Accuracy in meters. */
        accuracy?: number;
        /** Coordinate that specifies the north-south position of a point on the Earth's surface. */
        latitude?: number;
        /** Coordinate that specifies the east-west position of a point on the Earth's surface. */
        longitude?: number;
        /** Location in plain text. Example: USA or New York City */
        query?: string;
        /** Radius in meters. Max value: 40075000.0 (Earth's perimeter). */
        radius?: number;
      };
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the store locations that are in the specified country. */
  getStoresByCountry: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Country ISO code. */
        countryIso: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PointOfServiceList'];
          'application/json': components['schemas']['PointOfServiceList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the store locations in the specified country and region. */
  getStoresByCountryAndRegion: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Country ISO code. */
        countryIso: string;
        /** Region ISO code. */
        regionIso: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PointOfServiceList'];
          'application/json': components['schemas']['PointOfServiceList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves store counts per country and region. */
  getLocationCounts: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['StoreCountList'];
          'application/json': components['schemas']['StoreCountList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a store location using its unique name. */
  getStoreLocation: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Store identifier (currently store name) */
        storeId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PointOfService'];
          'application/json': components['schemas']['PointOfService'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getTitles: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['TitleList'];
          'application/json': components['schemas']['TitleList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Registers a customer. Requires the following parameters: login, password, firstName, lastName, titleCode. */
  createUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
      header: {
        /** The user's response token returned by captcha provider, for example, the g-recaptcha-response returned by google recaptcha client. When the captchaCheckEnabled = true for the store, the field is mandatory and will call the provider to validate. */
        'sap-commerce-cloud-captcha-token'?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['User'];
          'application/json': components['schemas']['User'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['UserSignUp'];
        'application/json': components['schemas']['UserSignUp'];
      };
    };
  };
  getUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['User'];
          'application/json': components['schemas']['User'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default). */
  replaceUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['User'];
        'application/json': components['schemas']['User'];
      };
    };
  };
  removeUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates customer profile. Only attributes provided in the request body will be changed. */
  updateUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['User'];
        'application/json': components['schemas']['User'];
      };
    };
  };
  /** Retrieves a list of all the addresses associated with a customer. */
  getAddresses: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** List of customer's addresses */
      200: {
        content: {
          'application/xml': components['schemas']['AddressList'];
          'application/json': components['schemas']['AddressList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a new address with detailed information provided. */
  createAddress: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Address'];
          'application/json': components['schemas']['Address'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** Validates the address of a customer. */
  validateAddress: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['AddressValidation'];
          'application/json': components['schemas']['AddressValidation'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** Returns detailed information about address with a given id. */
  getAddress: {
    parameters: {
      path: {
        /** Address identifier. */
        addressId: string;
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Address'];
          'application/json': components['schemas']['Address'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the address. Attributes not provided in the request will be defined again (set to null or default). */
  replaceAddress: {
    parameters: {
      path: {
        /** Address identifier. */
        addressId: string;
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** Deletes the address of a customer, which means the address records are erased. */
  removeAddress: {
    parameters: {
      path: {
        /** Address identifier. */
        addressId: string;
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the address. Only attributes provided in the request body will be changed. */
  updateAddress: {
    parameters: {
      path: {
        /** Address identifier. */
        addressId: string;
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** Retrieves a list of all the carts associated with a customer. */
  getCarts: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Pagination for savedCartsOnly. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Number of results returned per page if the savedCartsOnly parameter is set to true. Default value: 20. */
        pageSize?: number;
        /** If the value is true, only saved carts are returned. */
        savedCartsOnly?: boolean;
        /** Sorting method applied to the return results if the savedCartsOnly parameter is set to true. */
        sort?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartList'];
          'application/json': components['schemas']['CartList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request). */
  createCart: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Anonymous cart GUID. */
        oldCartId?: string;
        /** The cart GUID that will be merged with the anonymous cart. */
        toMergeCartGuid?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Cart'];
          'application/json': components['schemas']['Cart'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a cart using the cart identifier. To get entryGroup information, set fields value as follows: fields=entryGroups(BASIC), fields=entryGroups(DEFAULT), or fields=entryGroups(FULL). */
  getCart: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Cart'];
          'application/json': components['schemas']['Cart'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  removeCart: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Gets the ACH access token */
  itemPublicTokenExchange: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Order'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PlaidLinkCreationResponseDTO'];
      };
    };
  };
  /** Gets the ACH link token */
  linkTokenCreate: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Sets a delivery and payment address for the cart. */
  replaceCartDeliveryAndBillingAddress: {
    parameters: {
      query: {
        /** Address identifier */
        addressId: string;
      };
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a delivery and a payment address for the cart. */
  createCartDeliveryAndBillingAddress: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Address'];
          'application/json': components['schemas']['Address'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** The updated address country must be a valid delivery country for the current base store. */
  replaceCartDeliveryAddress: {
    parameters: {
      query: {
        /** Address identifier */
        addressId: string;
      };
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  createCartDeliveryAddress: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Address'];
          'application/json': components['schemas']['Address'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** Deletes the delivery address associated with a cart. */
  removeCartDeliveryAddress: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getAvailableApmsForCart: {
    parameters: {
      query: {
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CheckoutComAPMConfigurationList'];
          'application/json': components['schemas']['CheckoutComAPMConfigurationList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a delivery address for the cart. */
  setDeliveryAddress: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['ApplePayShippingContactUpdate'];
          'application/json': components['schemas']['ApplePayShippingContactUpdate'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['ApplePayPaymentContact'];
        'application/json': components['schemas']['ApplePayPaymentContact'];
      };
    };
  };
  /** Sets the deliveryMode for the cart. */
  setDeliveryMethodOnCart: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ApplePayShippingMethodUpdate'];
          'application/json': components['schemas']['ApplePayShippingMethodUpdate'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplePayShippingMethod'];
      };
    };
  };
  /** Gets apple pay payment request */
  getPaymentRequest: {
    parameters: {
      query: {
        productCode?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ApplePayPaymentRequest'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Place a order with apple pay. */
  placeOrder_2: {
    parameters: {
      query: {
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PlaceWalletOrder'];
          'application/json': components['schemas']['PlaceWalletOrder'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplePayAuthorisationRequest'];
      };
    };
  };
  /** Validates the session for apple pay */
  requestSession: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': { [key: string]: unknown };
          'application/json': { [key: string]: unknown };
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplePayValidateMerchantRequest'];
      };
    };
  };
  /** Defines and assigns details of a new APM payment to the cart. */
  createCartPaymentDetails_2: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['PaymentDetails'];
        'application/json': components['schemas']['PaymentDetails'];
      };
    };
  };
  /** Defines and assigns details of a new credit card payment to the cart. */
  createCartPaymentDetails_1: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['PaymentDetails'];
          'application/json': components['schemas']['PaymentDetails'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['PaymentDetails'];
        'application/json': components['schemas']['PaymentDetails'];
      };
    };
  };
  addBillingAddressToCart: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Address'];
          'application/json': components['schemas']['Address'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['Address'];
        'application/json': components['schemas']['Address'];
      };
    };
  };
  /** Creates a clone of a saved cart. Customers can provide a name and a description for the cloned cart even though they aren't mandatory parameters. */
  doCartClone: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Description of the cloned cart. */
        description?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Name of the cloned cart. */
        name?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['SaveCartResult'];
          'application/json': components['schemas']['SaveCartResult'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Retrieves a list of stores that have all the cart entries in stock and ready for pickup.
   *
   * Note: The response returns an empty list if no store has all the products in stock or if the products are all associated with the same pickup location.
   */
  getConsolidatedPickupLocations: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PointOfServiceList'];
          'application/json': components['schemas']['PointOfServiceList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Creates the store location where the customer will pick up all the products.
   *
   * Note: If any product is out of stock at the specified location, this product is removed from the cart.
   */
  createConsolidatedPickupLocation: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** The name of the store where items will be picked up */
        storeName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartModificationList'];
          'application/json': components['schemas']['CartModificationList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves information about the delivery mode selected for the cart, including the delivery mode code, name, cost, and so on. */
  getCartDeliveryMode: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['DeliveryMode'];
          'application/json': components['schemas']['DeliveryMode'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the delivery mode details for the cart based on the specified delivery mode identifier. */
  replaceCartDeliveryMode: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Delivery mode identifier (code) */
        deliveryModeId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  removeCartDeliveryMode: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the delivery modes defined for the current base store and the cart delivery address. If the cart does not have a delivery address, an empty list will be returned. */
  getCartDeliveryModes: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['DeliveryModeList'];
          'application/json': components['schemas']['DeliveryModeList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Place an order for direct APMs. */
  placeDirectOrder: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Order'];
          'application/json': components['schemas']['Order'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Assigns an email to the cart. */
  replaceCartGuestUser: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Email of the guest user. It will be used during the checkout process. */
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of cart entries with the product data. */
  getCartEntries: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['OrderEntryList'];
          'application/json': components['schemas']['OrderEntryList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Adds a product to the specified cart. */
  createCartEntry: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartModification'];
          'application/json': components['schemas']['CartModification'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['OrderEntry'];
        'application/json': components['schemas']['OrderEntry'];
      };
    };
  };
  getCartEntry: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero. */
        entryNumber: number;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['OrderEntry'];
          'application/json': components['schemas']['OrderEntry'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the quantity of a single cart entry and the details of the pickup store. Attributes not provided in the request will be defined again (set to null or default) */
  replaceCartEntry: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero. */
        entryNumber: number;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartModification'];
          'application/json': components['schemas']['CartModification'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['OrderEntry'];
        'application/json': components['schemas']['OrderEntry'];
      };
    };
  };
  removeCartEntry: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero. */
        entryNumber: number;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the quantity of a single cart entry and the details of the pickup store. */
  updateCartEntry: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero. */
        entryNumber: number;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartModification'];
          'application/json': components['schemas']['CartModification'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['OrderEntry'];
        'application/json': components['schemas']['OrderEntry'];
      };
    };
  };
  addToCartEntryGroup: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order. */
        entryGroupNumber: number;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartModification'];
          'application/json': components['schemas']['CartModification'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrderEntry'];
      };
    };
  };
  /** Deletes an entry group from the associated cart. */
  removeCartEntryGroup: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order. */
        entryGroupNumber: number;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the cart without corresponding saved cart attributes by flagging it for deletion. The cart is not deleted from the database, but without the saved cart properties, the cart will be handled by the cart removal job just like any other cart. */
  doUpdateFlagForDeletion: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['SaveCartResult'];
          'application/json': components['schemas']['SaveCartResult'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a delivery address and delivery method for the cart. */
  getGooglePayDeliveryInfo: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['GooglePayPaymentDataRequestUpdate'];
          'application/json': components['schemas']['GooglePayPaymentDataRequestUpdate'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['GooglePayIntermediatePaymentData'];
        'application/json': components['schemas']['GooglePayIntermediatePaymentData'];
      };
    };
  };
  /** Gets google pay payment request */
  getMerchantConfiguration: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GooglePayMerchantConfiguration'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Place a order with google pay. */
  placeOrder_1: {
    parameters: {
      query: {
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['PlaceWalletOrder'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GooglePayAuthorisationRequest'];
      };
    };
  };
  /** Gets the klarna client token */
  getClientToken: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['KlarnaClientTokenData'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the information required to create a subscription that contacts the payment provider directly. This information contains the URL of the payment provider and a list of required parameters. */
  getSopPaymentRequestDetails: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Define which url should be returned */
        extendedMerchantCallback?: boolean;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** The URL that the payment provider uses to return payment information. Possible values for responseUrl include the following: “orderPage_cancelResponseURL”, “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”. */
        responseUrl: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PaymentRequest'];
          'application/json': components['schemas']['PaymentRequest'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Retrieves the response from the payment provider after creating the SOP payment subscription. If the payment subscription was created successfully, the payment details are returned. If no response from the payment provider, a "202 Accepted" status is returned. Otherwise, an error response is returned.
   *
   * Note: The execution of the “Try it out” button always returns an error because the extended carts controller handles parameters differently depending on which payment provider is used.
   */
  getSopPaymentResponse: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PaymentDetails'];
          'application/json': components['schemas']['PaymentDetails'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * If the SOP payment subscription was successfully created, the payment details are defined and returned.
   *
   * Note: The execution of the “Try it out” button always returns an error because the extended carts controller handles parameters differently, depending on which payment provider is used.
   */
  doHandleSopPaymentResponse: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PaymentDetails'];
          'application/json': components['schemas']['PaymentDetails'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Deletes the payment provider response for the SOP payment subscription. */
  removeSopPaymentResponse: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Sets credit card payment details for the specified cart. */
  replaceCartPaymentDetails: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Payment details identifier. */
        paymentDetailsId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates the details of a new credit card payment and assigns it to the cart. */
  createCartPaymentDetails: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['PaymentDetails'];
          'application/json': components['schemas']['PaymentDetails'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['PaymentDetails'];
        'application/json': components['schemas']['PaymentDetails'];
      };
    };
  };
  /** Retrieves information about the promotions applied to the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
  getCartPromotions: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PromotionResultList'];
          'application/json': components['schemas']['PromotionResultList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Applies a promotion to the cart using the promotion identifier. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
  doApplyCartPromotion: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Promotion identifier. */
        promotionId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves information about the promotion using the promotion identifier associated with the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
  getCartPromotion: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Promotion identifier. */
        promotionId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PromotionResultList'];
          'application/json': components['schemas']['PromotionResultList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Deletes the promotion of the order using the promotion identifier defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine. */
  removeCartPromotion: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** Promotion identifier. */
        promotionId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Place an order for redirect APMs. */
  placeRedirectOrder: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Order'];
          'application/json': components['schemas']['Order'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': { [key: string]: unknown };
      };
    };
  };
  /** Sets the requested retrieval date with a given date for the cart. */
  setCartRequestedRetrievalDate: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Customer requested date for order retrieval */
        requestedRetrievalAt?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Restores the data of a saved cart. */
  doUpdateSavedCart: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['SaveCartResult'];
          'application/json': components['schemas']['SaveCartResult'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates a cart to explicitly save it. Adds the name and description of the saved cart if specified. */
  doSaveCart: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Description of the saved cart. */
        saveCartDescription?: string;
        /** Name of the saved cart. */
        saveCartName?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['SaveCartResult'];
          'application/json': components['schemas']['SaveCartResult'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the saved cart for an authenticated customer using the cart identifier.  To get entryGroup information, set fields value as follows: fields=savedCartData(entryGroups(BASIC)), fields=savedCartData(entryGroups(DEFAULT)), or fields=savedCartData(entryGroups(FULL)). */
  getSavedCart: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['SaveCartResult'];
          'application/json': components['schemas']['SaveCartResult'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Validates the cart and returns the cart data during checkout and quotation. */
  validateCart: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['CartModificationList'];
          'application/json': components['schemas']['CartModificationList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves a list of vouchers associated with the cart. */
  getCartVouchers: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['VoucherList'];
          'application/json': components['schemas']['VoucherList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Assigns a voucher to the cart using the voucher identifier. */
  doApplyCartVoucher: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** Voucher identifier (code) */
        voucherId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Deletes a voucher associated with the current cart. */
  removeCartVoucher: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** Cart identifier: cart code for logged-in user, cart GUID for anonymous user, or 'current' for the last modified cart. */
        cartId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
        /** Voucher identifier (code) */
        voucherId: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Retrieves the CMS components using the specified identifiers. If you don't provide any component identifiers, all of the components will be retrieved.
   * The components list is filtered by the specified catalog, product, or category restrictions.The result is sorted according to the sort parameter.
   */
  getComponentsByIdsAndUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Catalog code */
        catalogCode?: string;
        /** Category code */
        categoryCode?: string;
        /** List of Component identifiers */
        componentIds?: string[];
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Number of results returned per page. Default value: 10. */
        pageSize?: number;
        /** Product code */
        productCode?: string;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** ComponentIDListWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['ComponentList'];
          'application/json': components['schemas']['ComponentList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the CMS component data. */
  getComponentByIdAndUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Component identifier */
        componentId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Catalog code */
        catalogCode?: string;
        /** Category code */
        categoryCode?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Product code */
        productCode?: string;
      };
    };
    responses: {
      /** ComponentWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['Component'];
          'application/json': components['schemas']['Component'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /**
   * Retrieves the page data and CMS content slots using the pageLabel/pageId or the code parameter. If you don't provide a value for one of these parameters, the homepage CMS content slots are retrieved.
   * Content pages can be filtered using pageLabel/pageId while the other page types can be filtered using the specified code.
   */
  getPageWithUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Page code. Examples: homepage, electronics, cameras, 585. */
        code?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Page id. When pageId is provided, pageLabelOrId will be ignored. */
        pageId?: string;
        /**
         * Page label. If no page has a label that matches the page label exactly, try to find pages whose label starts with a section of the page label.
         * Note: URL encoding on the page label should be applied when the label contains special characters. When pageLabel is provided, pageLabelOrId will be ignored.
         */
        pageLabel?: string;
        /**
         * Page Label or Id. If no page has a label that matches the page label exactly, try to find pages whose label starts with a section of the page label. Otherwise, try to find the page by id.
         * When label and ID values can match, passing in the pageId parameter may result in obtaining variation pages with the same pageLabel but different pageId. Therefore, it is advisable to use both the pageId and pageLabel parameters to ensure accuracy.Note: URL encoding on the page label should be applied when the label contains special characters.
         */
        pageLabelOrId?: string;
        /** Page type */
        pageType?:
          | 'ContentPage'
          | 'ProductPage'
          | 'CategoryPage'
          | 'CatalogPage';
      };
    };
    responses: {
      /** CMSPageWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['CMSPage'];
          'application/json': components['schemas']['CMSPage'];
        };
      };
      /** Should not pass both pageLabel and pageId simultaneously. (InvalidPageQualifierException) */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the page data and CMS content slots, each of which contains a list of CMS component data. The page identifier is required. */
  getPageByIdAndUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Page Id */
        pageId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Category code */
        categoryCode?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Product code */
        productCode?: string;
      };
    };
    responses: {
      /** CMSPageWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['CMSPage'];
          'application/json': components['schemas']['CMSPage'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getAllPagesWithUser: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL. */
        fields?: 'BASIC' | 'DEFAULT' | 'FULL';
        /** Number of results returned per page. Default value: 10. */
        pageSize?: number;
        /** Page type. */
        pageType?:
          | 'ContentPage'
          | 'ProductPage'
          | 'CategoryPage'
          | 'CatalogPage';
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** CMSPageListWsDTO */
      200: {
        content: {
          'application/xml': components['schemas']['CMSPageList'];
          'application/json': components['schemas']['CMSPageList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates consent to collect or transfer the personal data of a customer. */
  doGiveConsent: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Consent template identifier. */
        consentTemplateId: string;
        /** Consent template version. */
        consentTemplateVersion: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ConsentTemplate'];
          'application/json': components['schemas']['ConsentTemplate'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** If the consent was given, then the consent is deleted. If the consent was withdrawn, then it returns a withdrawal error. If the consent doesn't exist, it returns a "not found" error. If the customer is anonymous, then it returns an "access denied" error. */
  removeConsent: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Consent code. */
        consentCode: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** If a customer has not given or has withdrawn their consent to the template, a date is not returned. */
  getConsentTemplates: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ConsentTemplateList'];
          'application/json': components['schemas']['ConsentTemplateList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the consent using the template identifier. If a customer has not given or has withdrawn their consent to the template, a date is not returned. */
  getConsentTemplate: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Consent template identifier. */
        consentTemplateId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['ConsentTemplate'];
          'application/json': components['schemas']['ConsentTemplate'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getUserCustomerGroups: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier. */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['UserGroupList'];
          'application/json': components['schemas']['UserGroupList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the products and their future availabilities. */
  getFutureStocksList: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Products identifiers. */
        productCodes: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ProductFutureStocksList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  getFutureStocks: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Product identifier. */
        productCode: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ProductFutureStocks'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Changes a customer's login name. Requires the customer's current password. */
  replaceUserLogin: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** New login name of a customer. The name is case insensitive. */
        newLogin: string;
        /** Current password of a customer. */
        password: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Changes a customer's login id. Requires the customer's current password. */
  changeUserLoginId: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReplaceLoginIdInput'];
      };
    };
  };
  /** Publish notification event about successful login. */
  doPublishSuccessfulLoginEvent: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier. */
        userId: string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Returns the notification preferences of the current customer. */
  getNotificationPreferences: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['notificationPreferenceList'];
          'application/json': components['schemas']['notificationPreferenceList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the notification preference of the current customer. */
  updateNotificationPreferences: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['BasicnotificationPreferenceList'];
        'application/json': components['schemas']['BasicnotificationPreferenceList'];
      };
    };
  };
  /** Returns the site messages of current customer. */
  siteMessages: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user. */
        userId: string;
      };
      query: {
        /** The current result page requested. */
        currentPage?: string;
        /** The flag for indicating if total number of results is needed or not. */
        needsTotal?: 'true' | 'false';
        /** The number of results returned per page. */
        pageSize?: string;
        /** The sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['siteMessageSearchResult'];
          'application/json': components['schemas']['siteMessageSearchResult'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the order history for all return requests associated with a customer. */
  getReturnRequests: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Number of results returned per page. */
        pageSize?: number;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReturnRequestList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates an order return request. An order can be completely or partially returned. For a complete return, add all order entry numbers and quantities in the request body. For a partial return, only add the order entry numbers and quantities of the selected products. */
  createReturnRequest: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['ReturnRequest'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReturnRequestEntryInputList'];
      };
    };
  };
  /** Retrieves the details of a return request. To get entryGroup information, set fields value as follows: fields=order(entryGroups(BASIC)), fields=order(entryGroups(DEFAULT)), or fields=order(entryGroups(FULL)). */
  getReturnRequest: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order returns request code. */
        returnRequestCode: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReturnRequest'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates the order return request. Only cancellation of the request is supported by setting the attribute status to CANCELLING. Cancellation of the return request cannot be reverted */
  updateReturnRequest: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order returns request code. */
        returnRequestCode: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReturnRequestModification'];
      };
    };
  };
  /** Retrieves the order history of a customer. The response may display the results across multiple pages, when applicable. */
  getUserOrderHistory: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** The number of results returned per page. */
        pageSize?: number;
        /** Sorting method applied to the return results. */
        sort?: string;
        /**
         * Filters orders with specified status(es). For example, statuses = CANCELLED returns CANCELLED orders. To filter multiple statues, separate statues with "," and all orders with these statuses will be returned. For example, statuses = CANCELLED,COMPLETED,READY returns all orders with statuses CANCELLED,COMPLETED, and READY.
         * Options available are:
         * CANCELLING,
         * CHECKED_VALID,
         * CREATED,
         * OPEN,
         * READY,
         * CHECKED_INVALID,
         * ON_HOLD,
         * ON_VALIDATION,
         * PENDING_APPROVAL,
         * SUSPENDED,
         * COMPLETED,
         * PAYMENT_AUTHORIZED,
         * PENDING_APPROVAL_FROM_MERCHANT,
         * CANCELLED,
         * PAYMENT_NOT_AUTHORIZED,
         * PENDING_QUOTE,
         * APPROVED_QUOTE,
         * PAYMENT_AMOUNT_RESERVED,
         * PAYMENT_AMOUNT_NOT_RESERVED,
         * REJECTED_QUOTE,
         * APPROVED,
         * PAYMENT_CAPTURED,
         * PAYMENT_NOT_CAPTURED,
         * REJECTED,
         * APPROVED_BY_MERCHANT,
         * FRAUD_CHECKED,
         * ORDER_SPLIT,
         * REJECTED_BY_MERCHANT,
         * ASSIGNED_TO_ADMIN,
         * PROCESSING_ERROR,
         * B2B_PROCESSING_ERROR,
         * WAIT_FRAUD_MANUAL_CHECK,
         * PAYMENT_NOT_VOIDED,
         * TAX_NOT_VOIDED,
         * TAX_NOT_COMMITTED,
         * TAX_NOT_REQUOTED
         */
        statuses?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['OrderHistoryList'];
          'application/json': components['schemas']['OrderHistoryList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates an order and returns the order details. The response contains all the order data. */
  placeOrder: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Cart code for logged in user, cart GUID for guest checkout */
        cartId: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/xml': components['schemas']['Order'];
          'application/json': components['schemas']['Order'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the total number of orders for a customer in the response header, under the "x-total-count" attribute. */
  countUserOrders: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID. */
        statuses?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves the details of the order. To get entryGroup information, set fields value as follows: fields=entryGroups(BASIC), fields=entryGroups(DEFAULT), or fields=entryGroups(FULL). */
  getUserOrders: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order GUID or order code. */
        code: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Order'];
          'application/json': components['schemas']['Order'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Cancels an order, completely or partially. For a complete cancellation, add all the order entry numbers and quantities in the request body. For partial cancellation, only add the order entry numbers and quantities to be cancelled. */
  doCancelOrder: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order code */
        code: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancellationRequestEntryInputList'];
      };
    };
  };
  /** Returns invoices based on a specific order code. The response contains list of invoice information. */
  getUserOrderInvoices: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order Code */
        code: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** The current result page requested. */
        currentPage?: number;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** The number of results returned per page. */
        pageSize?: number;
        /** Sorting method applied to the return results. */
        sort?: string;
      };
    };
    responses: {
      /** List of invoice of an order */
      200: {
        content: {
          'application/xml': components['schemas']['SAPInvoiceList'];
          'application/json': components['schemas']['SAPInvoiceList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Get invoice of an order in encoded byte array */
  getUserOrderInvoiceBinary: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Order Code */
        code: string;
        /** Invoice ID */
        invoiceId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** External system identifier where the invoice resides. */
        externalSystemId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/octet-stream': string[];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Returns details of consignment tracking information based on the order code and the consignment code. */
  getConsignmentTrackingData: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Consignment identifier. */
        consignmentCode: string;
        /** Order identifier. */
        orderCode: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['consignmentTracking'];
          'application/json': components['schemas']['consignmentTracking'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  replaceUserPassword: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier. */
        userId: string;
      };
      query: {
        /** New password. */
        new: string;
        /** Old password. */
        old: string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  changeUserPassword: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReplacePasswordInput'];
      };
    };
  };
  /** Retrieves all credit card payment details made by the customer. */
  getPaymentDetailsList: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** The flag to mark if the detailed payment is a saved one. */
        saved?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PaymentDetailsList'];
          'application/json': components['schemas']['PaymentDetailsList'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Retrieves specific credit card payment details made by the customer using the paymentDetailsId. */
  getPaymentDetails: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Payment details identifier. */
        paymentDetailsId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['PaymentDetails'];
          'application/json': components['schemas']['PaymentDetails'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates existing customer's credit card payment info. */
  replacePaymentDetails: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Payment details identifier. */
        paymentDetailsId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['PaymentDetails'];
        'application/json': components['schemas']['PaymentDetails'];
      };
    };
  };
  /** Deletes customer's credit card payment details. */
  removePaymentDetails: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Payment details identifier. */
        paymentDetailsId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Updates existing credit card payment details made by the customer using the paymentDetailsId. Only those attributes provided in the request will be updated. */
  updatePaymentDetails: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Payment details identifier. */
        paymentDetailsId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/xml': components['schemas']['PaymentDetails'];
        'application/json': components['schemas']['PaymentDetails'];
      };
    };
  };
  /** Retrieves product interests as CustomerInterestsSearchResult for a specific user. */
  getProductInterests: {
    parameters: {
      path: {
        /** Base site identifier. */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Current result page. Default value is 0. */
        currentPage?: string;
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Flag to indicate if the total number of results is needed or not. */
        needsTotal?: 'true' | 'false';
        /** Notification type. */
        notificationType?: string;
        /** The number of results returned per page. */
        pageSize?: string;
        /** Product identifier. */
        productCode?: string;
        /** Sorting method applied to the return results. Default value is by name. */
        sort?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['customerInterestsSearchPage'];
          'application/json': components['schemas']['customerInterestsSearchPage'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates a product interest for a customer at a time. */
  createProductInterest: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
        /** Notification type. */
        notificationType: string;
        /** Product identifier. */
        productCode: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['productInterestRelation'];
          'application/json': components['schemas']['productInterestRelation'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Deletes the product interests that a customer saved with product code and notification type. */
  removeProductInterest: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
      query: {
        /** Notification type. */
        notificationType: string;
        /** Product identifier. */
        productCode: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
  /** Creates verification token, and sends token code via designated channel e.g. email. */
  createVerificationToken: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user */
        userId: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['VerificationToken'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVerificationTokenInput'];
      };
    };
  };
  /** Retrieves the details of the voucher using the voucher identifier. */
  getVoucher: {
    parameters: {
      path: {
        /** Base site identifier */
        baseSiteId: string;
        /** Voucher identifier (code) */
        code: string;
      };
      query: {
        /** Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC,DEFAULT,FULL */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/xml': components['schemas']['Voucher'];
          'application/json': components['schemas']['Voucher'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/xml': components['schemas']['errorList'];
          'application/json': components['schemas']['errorList'];
        };
      };
    };
  };
}

export interface external {}
